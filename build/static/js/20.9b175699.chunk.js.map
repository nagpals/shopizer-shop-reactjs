{"version":3,"sources":["pages/other/Checkout.js"],"names":["stripePromise","loadStripe","window","_env_","APP_STRIPE_KEY","paymentForm","firstName","name","validate","required","value","message","lastName","company","address","city","country","stateProvince","postalCode","phone","minLength","email","pattern","shipFirstName","shipLastName","shipCompany","shipAddress","shipCity","shipCountry","shipStateProvince","shipPostalCode","isAgree","password","hasSpecialChar","match","repeatPassword","CARD_ELEMENT_OPTIONS","iconStyle","hidePostalCode","style","base","iconColor","color","fontSize","fontFamily","fontSmoothing","invalid","connect","state","cartID","cartData","shipCountryData","userData","stateData","shipStateData","shipState","currentLocation","currentAddress","defaultStore","merchantData","merchant","isLoading","loading","currentLanguageCode","multilanguage","dispatch","setLoader","getShippingCountry","getState","code","getShippingState","deleteAllFromCart","orderID","strings","location","pathname","history","useHistory","addToast","useToasts","useState","config","setConfig","cartItems","setCartItems","isShipping","setIsShipping","isAccount","setIsAccount","timer","setTimer","shippingOptions","setShippingOptions","shippingQuote","setShippingQuote","selectedOptions","setSelectedOptions","deliveryData","setDeliveryData","agreementData","setAgreementData","useForm","mode","criteriaMode","register","control","handleSubmit","errors","setValue","watch","reset","setError","clearErrors","loadScript","src","Promise","resolve","script","document","createElement","onload","onerror","body","appendChild","displayRazorpay","Userdata","a","push","Total","filter","el","title","TotalPrice","console","log","appearance","autoDismiss","ordersData","amount","constant","axios","post","RAZORPAY_API_BASEURL","ACTION","RAZORORDERS","result","data","order_id","id","currency","options","key","APP_KEY_ID_RAZORPAY","toString","handler","response","onPayment","razorpay_order_id","orderCreationId","razorpayPaymentId","razorpay_payment_id","razorpayOrderId","razorpaySignature","razorpay_signature","SUCCESS","prefill","contact","notes","theme","paymentObject","Razorpay","on","error","open","setRef","useEffect","getSummaryOrder","getConfig","shippingQuoteChange","onChangeShipping","action","CART","WebService","get","setTimeout","getProfile","setDefaultsValue","length","find","i","types","some","address_components","short_name","AUTH","CUSTOMER","PROFILE","billing","zone","emailAddress","delivery","CONFIG","onChangeShipAddress","SHIPPING","param","shippingQuoteOptionId","quoteID","TOTAL","totals","onSubmitOrder","elements","stripe","card","getElement","CardElement","createToken","token","CHECKOUT","customer","setLocalData","onAgreement","CONTENT","BOXES","AGREEMENT","description","changeAddress","p","JSON","stringify","unity","executed","to","process","headerContainerClass","headerPaddingClass","headerTop","className","isValidObject","products","type","ref","url","APP_MAP_API_KEY","onLoad","autocomplete","google","maps","places","Autocomplete","getElementById","addListener","getPlace","undefined","pCode","long_name","componentForm","street_number","route","sublocality","array","addressType","val","placeholder","rules","render","props","onChange","e","target","map","onBlur","clearTimeout","onPasswordChange","onConfirmPassword","defaultValue","cartItem","width","quantity","finalPrice","quote","total","displayShipping","checked","optionName","optionPriceText","textAlign","APP_PAYMENT_TYPE","locale","onReady","dangerouslySetInnerHTML","__html","replace","onClick","d","height","srcDoc"],"mappings":"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","file":"static/js/20.9b175699.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport axios from \"axios\";\r\nimport React, { Fragment, useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport MetaTags from \"react-meta-tags\";\r\nimport { connect } from \"react-redux\";\r\nimport { BreadcrumbsItem } from \"react-breadcrumbs-dynamic\";\r\n// import { getDiscountPrice } from \"../../helpers/product\";\r\n// import Tab from \"react-bootstrap/Tab\";\r\n// import Nav from \"react-bootstrap/Nav\";\r\nimport Layout from \"../../layouts/Layout\";\r\nimport Breadcrumb from \"../../wrappers/breadcrumb/Breadcrumb\";\r\nimport { isValidObject, setLocalData } from \"../../util/helper\";\r\nimport constant from '../../util/constant';\r\nimport WebService from '../../util/webService';\r\nimport { getShippingCountry, getState, getShippingState } from \"../../redux/actions/userAction\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport {\r\n  CardElement, Elements, ElementsConsumer\r\n} from '@stripe/react-stripe-js';\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport { setLoader } from \"../../redux/actions/loaderActions\";\r\nimport {\r\n  deleteAllFromCart\r\n} from \"../../redux/actions/cartActions\";\r\nimport Script from 'react-load-script';\r\nimport { multilanguage } from \"redux-multilanguage\";\r\n\r\n\r\n\r\nconst stripePromise = loadStripe(window._env_.APP_STRIPE_KEY);\r\nconst paymentForm = {\r\n  firstName: {\r\n    name: \"firstName\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Firstname is required\"\r\n      }\r\n    }\r\n  },\r\n  lastName: {\r\n    name: \"lastName\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Lastname is required\"\r\n      }\r\n    }\r\n  },\r\n  company: {\r\n    name: \"company\"\r\n  },\r\n  address: {\r\n    name: \"address\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Address is required\"\r\n      }\r\n    }\r\n  },\r\n  city: {\r\n    name: \"city\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"City is required\"\r\n      }\r\n    }\r\n  },\r\n  country: {\r\n    name: \"country\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Country is required\"\r\n      }\r\n    }\r\n  },\r\n  stateProvince: {\r\n    name: \"stateProvince\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"State is required\"\r\n      }\r\n    }\r\n  },\r\n  postalCode: {\r\n    name: \"postalCode\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Postal code is required\"\r\n      }\r\n    }\r\n  },\r\n  phone: {\r\n    name: \"phone\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Phone number is required\"\r\n      },\r\n      minLength: {\r\n        value: 10,\r\n        message: \"Enter a 10-digit number\"\r\n      }\r\n    }\r\n  },\r\n  email: {\r\n    name: \"email\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Email is required\"\r\n      },\r\n      pattern: {\r\n        value: /^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i,\r\n        message: 'Please entered the valid email id'\r\n      }\r\n    }\r\n  },\r\n  shipFirstName: {\r\n    name: \"shipFirstName\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Firstname is required\"\r\n      }\r\n    }\r\n  },\r\n  shipLastName: {\r\n    name: \"shipLastName\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Lastname is required\"\r\n      }\r\n    }\r\n  },\r\n  shipCompany: {\r\n    name: \"shipCompany\"\r\n  },\r\n  shipAddress: {\r\n    name: \"shipAddress\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Address is required\"\r\n      }\r\n    }\r\n  },\r\n  shipCity: {\r\n    name: \"shipCity\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"City is required\"\r\n      }\r\n    }\r\n  },\r\n  shipCountry: {\r\n    name: \"shipCountry\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Country is required\"\r\n      }\r\n    }\r\n  },\r\n  shipStateProvince: {\r\n    name: \"shipStateProvince\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"State is required\"\r\n      }\r\n    }\r\n  },\r\n  shipPostalCode: {\r\n    name: \"shipPostalCode\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Postal code is required\"\r\n      }\r\n    }\r\n  },\r\n  isAgree: {\r\n    name: \"isAgree\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Please agree to our terms and conditions\"\r\n      }\r\n    }\r\n  },\r\n  password: {\r\n    name: \"password\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Password is required\"\r\n      },\r\n      validate: {\r\n        hasSpecialChar: (value) => (value && value.match(/^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,16}$/)) || 'Password must be minimum of 8 characters atleast one number and one special character'\r\n      }\r\n    }\r\n  },\r\n  repeatPassword: {\r\n    name: \"repeatPassword\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Repeat Password is required\"\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst CARD_ELEMENT_OPTIONS = {\r\n  iconStyle: \"solid\",\r\n  hidePostalCode: true,\r\n  style: {\r\n    base: {\r\n      iconColor: \"#303238\",\r\n      color: \"#303238\",\r\n      fontSize: \"16px\",\r\n      fontFamily: '\"Open Sans\", sans-serif',\r\n      fontSmoothing: \"antialiased\",\r\n      \"::placeholder\": {\r\n        color: \"#CFD7DF\"\r\n      }\r\n    },\r\n    invalid: {\r\n      color: \"#e5424d\",\r\n      \":focus\": {\r\n        color: \"#e5424d\"\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n\r\nconst Checkout = ({shipStateData, isLoading, currentLanguageCode, merchant, strings, location, cartID, defaultStore,getShippingCountry, getState,getShippingState,  shipCountryData, stateData, currentLocation, userData, setLoader, deleteAllFromCart }) => {\r\n  const { pathname } = location;\r\n  const history = useHistory();\r\n  const { addToast } = useToasts();\r\n  const [config, setConfig] = useState({});\r\n  const [cartItems, setCartItems] = useState([]);\r\n  const [isShipping, setIsShipping] = useState(false);\r\n  const [isAccount, setIsAccount] = useState(false);\r\n  const [timer, setTimer] = useState('');\r\n  const [shippingOptions, setShippingOptions] = useState();\r\n  const [shippingQuote, setShippingQuote] = useState([]);\r\n  const [selectedOptions, setSelectedOptions] = useState('');\r\n  const [deliveryData, setDeliveryData] = useState();\r\n  const [agreementData, setAgreementData] = useState('');\r\n  const { register, control, handleSubmit, errors, setValue, watch, reset, setError, clearErrors } = useForm({\r\n    mode: \"onChange\",\r\n    criteriaMode: \"all\"\r\n  });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  function loadScript(src) {\r\n    return new Promise((resolve) => {\r\n        const script = document.createElement(\"script\");\r\n        script.src = src;\r\n        script.onload = () => {\r\n            resolve(true);\r\n        };\r\n        script.onerror = () => {\r\n            resolve(false);\r\n        };\r\n        document.body.appendChild(script);\r\n    });\r\n}\r\n\r\nconst displayRazorpay = async (Userdata) => {\r\n// async function displayRazorpay(d) {\r\n\r\n  setLoader(true)\r\n\r\n  if( !cartID ) {\r\n    history.push(\"/\");\r\n  }\r\n   \r\n  var shipping = shippingQuote;\r\n\r\n  var Total = shipping.filter(function (el) {\r\n    return el.title ===\"Total\" \r\n  });\r\n\r\n  var TotalPrice = Total[0].value;\r\n\r\n  console.log(shippingQuote);\r\n  console.log(Userdata);\r\n   \r\n  try {\r\n    const res = await loadScript(\r\n      \"https://checkout.razorpay.com/v1/checkout.js\"\r\n  );\r\n \r\n  if (!res) {\r\n      // alert(\"Razorpay SDK failed to load. Are you online?\");\r\n      setLoader(false)\r\n    addToast(\"Razorpay SDK failed to load. Are you online?\", { appearance: \"error\", autoDismiss: true });\r\n      return;\r\n  }\r\n\r\n  // creating a new order\r\n  var ordersData ={\r\n    amount:TotalPrice\r\n  }\r\n  console.log(constant)\r\n  const result = await axios.post(window._env_.RAZORPAY_API_BASEURL+constant.ACTION.RAZORORDERS,ordersData);\r\n   \r\n  if (!result) {\r\n      // alert(\"Server error. Are you online?\");\r\n      setLoader(false)\r\n    addToast(\"Server error. Are you online?\", { appearance: \"error\", autoDismiss: true });\r\n      return;\r\n  }\r\n\r\n  debugger;\r\n\r\n  // Getting the order details back\r\n  console.log(result.data)\r\n  const { amount, id: order_id, currency } = result.data;\r\ndebugger;\r\n   \r\n  const options = {\r\n      key: window._env_.APP_KEY_ID_RAZORPAY, // Enter the Key ID generated from the Dashboard\r\n      amount: amount.toString(),\r\n      currency: currency,\r\n      // name: \"Vikrant Kaushik\",\r\n      // description: \"Make safe and secure payment\",\r\n      // image: \"\",\r\n      order_id: order_id,\r\n      handler: async function (response) {\r\n           debugger;\r\n          onPayment(Userdata, response.razorpay_order_id)\r\n          const data = {\r\n              orderCreationId: order_id,\r\n              razorpayPaymentId: response.razorpay_payment_id,\r\n              razorpayOrderId: response.razorpay_order_id,\r\n              razorpaySignature: response.razorpay_signature,\r\n              amount: amount.toString(),\r\n              currency: currency\r\n          };\r\n          const result = await axios.post(window._env_.RAZORPAY_API_BASEURL+constant.ACTION.SUCCESS, data);\r\n          console.log(result.data);  \r\n          // success code comes here     \r\n          // alert(result.data.msg);\r\n      },\r\n      prefill: {\r\n          name: Userdata.firstName+\" \"+Userdata.lastName,\r\n          email: Userdata.email,\r\n          contact: Userdata.phone,\r\n      },\r\n      notes: {\r\n          address: Userdata.address,\r\n      },\r\n      theme: {\r\n          color: \"#3399cc\",\r\n      },\r\n  };\r\n\r\n\r\n  \r\n\r\n\r\n  const paymentObject = new window.Razorpay(options);\r\n  paymentObject.on('payment.failed', function (response){\r\n    debugger;\r\n    console.log(response.error)\r\n    setLoader(false)\r\n    addToast(response.error.code, { appearance: \"error\", autoDismiss: true });\r\n        // alert(response.error.code);\r\n        // alert(response.error.description);\r\n        // alert(response.error.source);\r\n        // alert(response.error.step);\r\n        // alert(response.error.reason);\r\n        // alert(response.error.metadata.order_id);\r\n        // alert(response.error.metadata.payment_id);\r\n});\r\n  paymentObject.open();\r\n  } catch (error) {\r\n    console.log(error.response.data)\r\n    setLoader(false)\r\n    addToast(error.response.data, { appearance: \"error\", autoDismiss: true });\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // console.log(window._env_.APP_PAYMENT_TYPE);\r\n  const [ref, setRef] = useState(null);\r\n  \r\n  useEffect(() => {\r\n    getSummaryOrder()\r\n    // getNuviePayment()\r\n    getState('')\r\n    getShippingState('')\r\n    getShippingCountry(currentLanguageCode);\r\n    getConfig()\r\n    shippingQuoteChange('')\r\n    onChangeShipping()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const getSummaryOrder = async () => {\r\n    setLoader(true)\r\n    console.log('GET SUMMARY')\r\n    let action = constant.ACTION.CART + cartID + '?store=' + defaultStore;\r\n    try {\r\n      let response = await WebService.get(action);\r\n      // console.log(JSON.stringify(response));\r\n      if (response) {\r\n        setLoader(false)\r\n        setCartItems(response)\r\n      }\r\n    } catch (error) {\r\n      setLoader(false) \r\n      deleteAllFromCart()\r\n      setTimeout(() => {\r\n        history.push('/')\r\n      }, 200);\r\n      \r\n    }\r\n    if (userData) {\r\n      getProfile()\r\n    } else {\r\n      setDefaultsValue()\r\n    }\r\n  }\r\n  const setDefaultsValue = () => {\r\n    if (currentLocation.length > 0) {\r\n      setValue('country', currentLocation.find(i => i.types.some(i => i === \"country\")).address_components[0].short_name)\r\n      setValue('city', currentLocation.find(i => i.types.some(i => i === \"locality\")).address_components[0].short_name)\r\n      setValue('stateProvince', currentLocation.find(i => i.types.some(i => i === \"administrative_area_level_1\")).address_components[0].short_name)\r\n    }\r\n  }\r\n  const getProfile = async () => {\r\n    let action = constant.ACTION.AUTH + constant.ACTION.CUSTOMER + constant.ACTION.PROFILE;\r\n    try {\r\n      let response = await WebService.get(action);\r\n      if (response) {\r\n        getState(response.billing.country)\r\n        // console.log(response.billing.firstName);\r\n        setValue('firstName', response.billing.firstName)\r\n        setValue('lastName', response.billing.lastName)\r\n        setValue('company', response.billing.company)\r\n        setValue('address', response.billing.address)\r\n        setValue('country', response.billing.country)\r\n        setValue('city', response.billing.city)\r\n        setTimeout(() => {\r\n          setValue('stateProvince', response.billing.zone)\r\n        }, 1000)\r\n        setValue('postalCode', response.billing.postalCode)\r\n        setValue('phone', response.billing.phone)\r\n        setValue('email', response.emailAddress)\r\n\r\n        if (response.delivery) {\r\n          setDeliveryData(response.delivery)\r\n        //   getShippingState(response.delivery.country)\r\n        //   setValue('shipFirstName', response.delivery.firstName)\r\n        //   setValue('shipLastName', response.delivery.lastName)\r\n        //   setValue('shipCompany', response.delivery.company)\r\n        //   setValue('shipAddress', response.delivery.address)\r\n        //   setValue('shipCountry', response.delivery.country)\r\n        //   setValue('shipCity', response.delivery.city)\r\n        //   setTimeout(() => {\r\n        //     setValue('shipStateProvince', response.delivery.zone)\r\n        //   }, 1000)\r\n        //   // setValue('shipStateProvince', response.delivery.stateProvince)\r\n        //   setValue('shipPostalCode', response.delivery.postalCode)\r\n        }\r\n        \r\n        onChangeShipping()\r\n        // setConfig(response)\r\n      }\r\n    } catch (error) {\r\n    }\r\n  }\r\n  const getConfig = async () => {\r\n    let action = constant.ACTION.CONFIG;\r\n    try {\r\n      let response = await WebService.get(action);\r\n      if (response) {\r\n        setConfig(response)\r\n      }\r\n    } catch (error) {\r\n    }\r\n  }\r\n\r\n  // const onChangeAddress = async () => {\r\n  //   //console.log('Change address');\r\n  // }\r\n  const onChangeShipAddress = async () => {\r\n    setIsShipping(!isShipping)\r\n    // console.log(currentLocation.find(i => i.types.some(i => i == \"country\")).address_components[0].short_name)\r\n    setTimeout(() => {\r\n      if (userData) {\r\n            if(deliveryData){\r\n            getShippingState(deliveryData.country)\r\n            setValue('shipFirstName', deliveryData.firstName)\r\n            setValue('shipLastName', deliveryData.lastName)\r\n            setValue('shipCompany', deliveryData.company)\r\n            setValue('shipAddress', deliveryData.address)\r\n            setValue('shipCountry', deliveryData.country)\r\n            setValue('shipCity', deliveryData.city)\r\n            setTimeout(() => {\r\n              setValue('shipStateProvince', deliveryData.zone)\r\n            }, 1000)\r\n            // setValue('shipStateProvince', response.delivery.stateProvince)\r\n            setValue('shipPostalCode', deliveryData.postalCode)\r\n          }\r\n       } else{\r\n        if(currentLocation.length > 0) {\r\n          //console.log(currentLocation);\r\n          setTimeout(() => {\r\n            getShippingState(currentLocation.find(i => i.types.some(i => i === \"country\")).address_components[0].short_name)\r\n            setValue('shipCountry', currentLocation.find(i => i.types.some(i => i === \"country\")).address_components[0].short_name)\r\n            setValue('shipCity', currentLocation.find(i => i.types.some(i => i === \"locality\")).address_components[0].short_name)\r\n            setTimeout(() => {\r\n              setValue('shipStateProvince', currentLocation.find(i => i.types.some(i => i === \"administrative_area_level_1\")).address_components[0].short_name)\r\n            }, 1000)\r\n            \r\n            onChangeShipping()\r\n          }, 1000);\r\n        }\r\n      }\r\n    }, 1000);\r\n     \r\n  }\r\n  const handleScriptLoad = () => {\r\n    // Declare Options For Autocomplete\r\n    const options = {\r\n      types: ['address'],\r\n    };\r\n    // console.log('fsdfsdfsdfdsf')\r\n    // Initialize Google Autocomplete\r\n    /*global google*/ // To disable any eslint 'google not defined' errors\r\n    let autocomplete = new google.maps.places.Autocomplete(\r\n      document.getElementById('autocomplete'),\r\n      options,\r\n    );\r\n    // console.log(autocomplete)\r\n    // Avoid paying for data that you don't need by restricting the set of\r\n    // place fields that are returned to just the address components and formatted\r\n    // address.\r\n    // this.autocomplete.setFields(['address_components', 'formatted_address']);\r\n\r\n    // Fire Event when a suggested name is selected\r\n    autocomplete.addListener('place_changed', () => {\r\n      let p = autocomplete.getPlace();\r\n      // console.log(p);\r\n      setValue('country', p.address_components.find(i => i.types.some(i => i === \"country\")).short_name)\r\n      getState(p.address_components.find(i => i.types.some(i => i === \"country\")).short_name)\r\n\r\n      let city = p.address_components.find(i => i.types.some(i => i === \"locality\"))\r\n      if (city !== undefined) {\r\n        setValue('city', city.short_name)\r\n      }\r\n      let pCode = p.address_components.find(i => i.types.some(i => i === \"postal_code\"))\r\n      if (pCode !== undefined) {\r\n        setValue('postalCode', pCode.long_name)\r\n      }\r\n\r\n      var componentForm = {\r\n        street_number: 'short_name',\r\n        route: 'long_name',\r\n        sublocality: 'sublocality'\r\n      };\r\n      let array = [];\r\n      for (var i = 0; i < p.address_components.length; i++) {\r\n        var addressType = p.address_components[i].types[0];\r\n        if (componentForm[addressType]) {\r\n          var val = p.address_components[i][componentForm[addressType]];\r\n          array.push(val);\r\n\r\n        }\r\n      }\r\n      setValue('address', array.toString())\r\n      setTimeout(() => {\r\n        setValue('stateProvince', p.address_components.find(i => i.types.some(i => i === \"administrative_area_level_1\")).short_name)\r\n      }, 2000);\r\n\r\n      onChangeShipping()\r\n    });\r\n  }\r\n  const onChangeShipping = async () => {\r\n    let action = constant.ACTION.CART + cartID + '/' + constant.ACTION.SHIPPING;\r\n    let param = {};\r\n\r\n    //console.log('CHANGE SHIPPING');\r\n\r\n    if (isShipping) {\r\n      param = { 'postalCode': watch('shipPostalCode'), 'countryCode': watch('shipCountry') }\r\n    } else {\r\n      param = { 'postalCode': watch('postalCode'), 'countryCode': watch('country'), \"zpneCode\": watch('shipStateProvince') }\r\n    }\r\n    try {\r\n      let response = await WebService.post(action, param);\r\n      if (response) {\r\n        if(response.shippingOptions === \"null\" || response.shippingOptions === null){\r\n          shippingQuoteChange('')\r\n        }else{\r\n          shippingQuoteChange(response.shippingOptions[response.shippingOptions.length - 1].shippingQuoteOptionId)\r\n        }\r\n        setShippingOptions(response.shippingOptions)\r\n        setSelectedOptions(response.shippingOptions[response.shippingOptions.length - 1].shippingQuoteOptionId)\r\n        \r\n      }\r\n    } catch (error) {\r\n    }\r\n  }\r\n  const shippingQuoteChange = async (quoteID) => {\r\n    let action;\r\n\r\n    //console.log('SHIPPING QUOTE CHANGED');\r\n\r\n    if (quoteID) {\r\n      action = constant.ACTION.CART + cartID + '/' + constant.ACTION.TOTAL + '?quote=' + quoteID;\r\n    } else {\r\n      action = constant.ACTION.CART + cartID + '/' + constant.ACTION.TOTAL;\r\n    }\r\n    // console.log('Shipping action ' +action);\r\n    try {\r\n      let response = await WebService.get(action);\r\n      // console.log('Order total response ' + JSON.stringify(response));\r\n      if (response) {\r\n        setShippingQuote(response.totals)\r\n      }\r\n    } catch (error) {\r\n    }\r\n\r\n  }\r\n  const onSubmitOrder = async (data, elements, stripe) => {\r\n     \r\n    setLoader(true)\r\n\r\n    if( !cartID ) {\r\n      history.push(\"/\");\r\n    }\r\n\r\n    let card = elements.getElement(CardElement);\r\n    // console.log(card);\r\n    // let ownerInfo = {\r\n    //   owner: {\r\n    //     name: data.firstName + ' ' + data.lastName,\r\n    //     phone: data.phone,\r\n    //     email: data.email\r\n    //   },\r\n    // };\r\n    const result = await stripe.createToken(card);\r\n    // stripe.createSource(card, ownerInfo).then(function (result) {\r\n    if (result.error) {\r\n      setLoader(false)\r\n      addToast(result.error.message, { appearance: \"error\", autoDismiss: true });\r\n    } else {\r\n      // console.log(result);\r\n      onPayment(data, result.token.id)\r\n    }\r\n    // });\r\n  }\r\n  const onPayment = async (data, result) => {\r\n    debugger;\r\n    let action;\r\n\r\n    // console.log(data);\r\n    let param = {};\r\n    if (userData) {\r\n      action = constant.ACTION.AUTH + constant.ACTION.CART + cartID + '/' + constant.ACTION.CHECKOUT\r\n      param = {\r\n        \"shippingQuote\": selectedOptions,\r\n        \"currency\": merchant.currency,\r\n        \"payment\": {\r\n          \"paymentType\": \"CREDITCARD\",\r\n          \"transactionType\": \"CAPTURE\",\r\n          \"paymentModule\": \"stripe\",\r\n          \"paymentToken\": result.token,\r\n          \"amount\": shippingQuote[shippingQuote.length - 1].value\r\n        }\r\n      }\r\n    } else {\r\n      action = constant.ACTION.CART + cartID + '/' + constant.ACTION.CHECKOUT\r\n      let customer = {};\r\n      if (isShipping) {\r\n        customer = {\r\n          \"emailAddress\": data.email,\r\n          \"billing\": {\r\n            \"address\": data.address,\r\n            // \"company\": data.company,\r\n            \"city\": data.city,\r\n            \"postalCode\": data.postalCode,\r\n            \"country\": data.country,\r\n            // \"stateProvince\": data.stateProvince,\r\n            \"zone\": data.stateProvince,\r\n            \"firstName\": data.firstName,\r\n            \"lastName\": data.lastName,\r\n            // \"phone\": data.phone\r\n          },\r\n          \"delivery\": {\r\n            \"address\": data.shipAddress,\r\n            // \"company\": data.shipCompany,\r\n            \"city\": data.shipCity,\r\n            \"postalCode\": data.shipPostalCode,\r\n            \"country\": data.shipCountry,\r\n            // \"stateProvince\": data.shipStateProvince,\r\n            \"zone\": data.shipStateProvince,\r\n            \"firstName\": data.shipFirstName,\r\n            \"lastName\": data.shipLastName,\r\n            // \"phone\": data.shipPhone\r\n          }\r\n        }\r\n      } else {\r\n        customer = {\r\n          \"emailAddress\": data.email,\r\n          \"billing\": {\r\n            \"address\": data.address,\r\n            // \"company\": data.company,\r\n            \"city\": data.city,\r\n            \"postalCode\": data.postalCode,\r\n            \"country\": data.country,\r\n            // \"stateProvince\": data.stateProvince,\r\n            \"zone\": data.stateProvince,\r\n            \"firstName\": data.firstName,\r\n            \"lastName\": data.lastName,\r\n            // \"phone\": data.phone\r\n          }\r\n        }\r\n      }\r\n      if (isAccount) {\r\n        customer['password'] = data.password;\r\n        customer['repeatPassword'] = data.repeatPassword;\r\n      }\r\n      param = {\r\n        \"shippingQuote\": selectedOptions,\r\n        \"currency\": merchant.currency,\r\n        \"payment\": {\r\n          \"paymentType\": \"CREDITCARD\",\r\n          \"transactionType\": \"CAPTURE\",\r\n          \"paymentModule\": \"stripe\",\r\n          \"paymentToken\": result.token,\r\n          \"amount\": shippingQuote[shippingQuote.length - 1].value\r\n        },\r\n        \"customer\": customer\r\n      }\r\n    }\r\n    // console.log(param);\r\n    // \r\n    // if(window._env_.APP_PAYMENT_TYPE === 'RAZORPAY')\r\n    // {\r\n    //   debugger;\r\n    //     // this is for the razorpay only\r\n    //     var cartItems = cartItems;\r\n    //     reset({})\r\n    //     setRef(null);\r\n    //     deleteAllFromCart(cartID);\r\n    //     setLocalData('order-email', data.email)\r\n    //     addToast(\"Your order has been submitted\", { appearance: \"success\", autoDismiss: true });\r\n    //     history.push('/order-confirm')\r\n    //     setLoader(false);\r\n    // }\r\n    // else{\r\n    try {\r\n      let response = await WebService.post(action, param);\r\n      // console.log(response)\r\n      if (response) {\r\n        debugger;\r\n        reset({})\r\n        setRef(null);\r\n        // ref.clear()\r\n        deleteAllFromCart(response.id)\r\n        setLocalData('order-email', data.email)\r\n        addToast(\"Your order has been submitted\", { appearance: \"success\", autoDismiss: true });\r\n        history.push('/order-confirm')\r\n      }\r\n      setLoader(false)\r\n    } catch (error) {\r\n      debugger;\r\n      if (isAccount) {\r\n        addToast(\"Registering customer already exist\", { appearance: \"error\", autoDismiss: true });\r\n\r\n      } else {\r\n        addToast(\"Your order submission has been failed\", { appearance: \"error\", autoDismiss: true });\r\n      }\r\n      setLoader(false)\r\n    }\r\n  // }\r\n\r\n  }\r\n\r\n\r\n  const onConfirmPassword = (e) => {\r\n    if (watch('password') !== e.target.value) {\r\n      return setError(\r\n        paymentForm.repeatPassword.name,\r\n        {\r\n          type: \"notMatch\",\r\n          message: \"Repeat Password should be the same as a password\"\r\n        }\r\n      );\r\n    }\r\n\r\n  }\r\n  const onPasswordChange = (e) => {\r\n    // console.log(e.target.value)\r\n    // console.log(watch('repeatPassword'))\r\n    if (watch('repeatPassword') !== '' && watch('repeatPassword') !== e.target.value) {\r\n      return setError(\r\n        paymentForm.repeatPassword.name,\r\n        {\r\n          type: \"notMatch\",\r\n          message: \"Repeat Password should be the same as a password\"\r\n        }\r\n      );\r\n\r\n    } else {\r\n      clearErrors(paymentForm.repeatPassword.name);\r\n    }\r\n\r\n  }\r\n\r\n  const onAgreement = async() => {\r\n    let action = constant.ACTION.CONTENT + constant.ACTION.BOXES + constant.ACTION.AGREEMENT;\r\n    try {\r\n      let response = await WebService.get(action);\r\n      if (response) {\r\n        setAgreementData(response.description.description)\r\n      }\r\n    } catch (error) {\r\n    }\r\n  }\r\n\r\n  function changeAddress() {\r\n    var param = { 'postalCode': watch('postalCode'), 'countryCode': watch('country'), 'zoneCode': watch('stateProvince') }\r\n    if (isShipping) {\r\n     param = { 'postalCode': watch('shipPostalCode'), 'countryCode': watch('shipCountry'), 'zoneCode': watch('shipStateProvince')  }\r\n    } \r\n\r\n    var p = '';\r\n    if(p !== param) {\r\n\r\n      p = param;\r\n      //execute\r\n\r\n       \r\n       console.log('Required fields '+ JSON.stringify(param));\r\n       unity(p);\r\n  \r\n    } else {\r\n      return;\r\n    }\r\n\r\n  }\r\n\r\n  var unity = (function() {\r\n    var executed;\r\n    if(executed) {\r\n      return;\r\n    }\r\n    return function() {\r\n            if (!executed) {\r\n                executed = true;\r\n                //if( param.postalCode == null && param.country == null && param.zoneCode == null) {\r\n                //  return;\r\n                //}\r\n                var millisecondsToWait = 5000;\r\n                setTimeout(function() {\r\n                    // Whatever you want to do after the wait\r\n                    console.log('Into execution');\r\n\r\n\r\n                    executed = false;\r\n                }, millisecondsToWait);\r\n            } \r\n            return;\r\n            /**\r\n            console.log('The execution '+ executed);\r\n            var millisecondsToWait = 5000;\r\n            setTimeout(function() {\r\n                // Whatever you want to do after the wait\r\n                console.log('Into execution');\r\n                executed = false;\r\n            }, millisecondsToWait);\r\n            // do something\r\n            ?**/\r\n\r\n    };\r\n  })();\r\n  \r\n  return (\r\n    <Fragment>\r\n      <MetaTags>\r\n        <title>{merchant.name} | {strings[\"Checkout\"]}</title>\r\n        {/* <meta\r\n          name=\"description\"\r\n          content=\"Checkout page of flone react minimalist eCommerce template.\"\r\n        /> */}\r\n      </MetaTags>\r\n      <BreadcrumbsItem to={process.env.PUBLIC_URL + \"/\"}>{strings[\"Home\"]}</BreadcrumbsItem>\r\n      <BreadcrumbsItem to={process.env.PUBLIC_URL + pathname}>\r\n      {strings[\"Checkout\"]}\r\n      </BreadcrumbsItem>\r\n      <Layout headerContainerClass=\"container-fluid\"\r\n        headerPaddingClass=\"header-padding-2\"\r\n        headerTop=\"visible\">\r\n        {/* breadcrumb */}\r\n        <Breadcrumb />\r\n        <div className=\"checkout-area pt-95 pb-100\">\r\n\r\n          <div className=\"container\">\r\n            {\r\n\r\n              isValidObject(cartItems) && cartItems.products.length > 0 && !userData &&\r\n              <div className=\"checkout-heading\">\r\n                <Link to={\"/login\"}>{strings[\"Returning customer ? Click here to login\"]}</Link>\r\n              </div>\r\n\r\n            }\r\n\r\n            {isValidObject(cartItems) && cartItems.products.length > 0 ? (\r\n\r\n              <form>\r\n                <div className=\"row\">\r\n                  <div className=\"col-lg-6\">\r\n                    <div className=\"billing-info-wrap\">\r\n                      <h3>{strings[\"Billing Details\"]}</h3>\r\n                      <div className=\"row\">\r\n\r\n                        <div className=\"col-lg-6 col-md-6\">\r\n                          <div className=\"billing-info mb-20\">\r\n                            <label>{strings[\"First Name\"]}</label>\r\n                            <input type=\"text\" name={paymentForm.firstName.name} ref={register(paymentForm.firstName.validate)} />\r\n                            {errors[paymentForm.firstName.name] && <p className=\"error-msg\">{errors[paymentForm.firstName.name].message}</p>}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-6\">\r\n                          <div className=\"billing-info mb-20\">\r\n                            <label>{strings[\"Last Name\"]}</label>\r\n                            <input type=\"text\" name={paymentForm.lastName.name} ref={register(paymentForm.lastName.validate)} />\r\n                            {errors[paymentForm.lastName.name] && <p className=\"error-msg\">{errors[paymentForm.lastName.name].message}</p>}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-lg-12\">\r\n                          <div className=\"billing-info mb-20\">\r\n                            <label>{strings[\"Company Name\"]}</label>\r\n                            <input type=\"text\" name={paymentForm.company.name} ref={register(paymentForm.company.validate)} />\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-lg-12\">\r\n                          <div className=\"billing-info mb-20\">\r\n                            <label>{strings[\"Street Address\"]}</label>\r\n                            <Script\r\n                              url={\"https://maps.googleapis.com/maps/api/js?key=\" + window._env_.APP_MAP_API_KEY + \"&libraries=places\"}\r\n                              onLoad={handleScriptLoad}\r\n                            />\r\n                            <input\r\n                              className=\"billing-address\"\r\n                              placeholder={strings[\"House number and street name\"]}\r\n                              type=\"text\"\r\n                              id=\"autocomplete\"\r\n                              name={paymentForm.address.name}\r\n                              ref={register(paymentForm.address.validate)}\r\n                            />\r\n                            {errors[paymentForm.address.name] && <p className=\"error-msg\">{errors[paymentForm.address.name].message}</p>}\r\n\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-lg-12\">\r\n                          <div className=\"billing-select mb-20\">\r\n                            <label>{strings[\"Country\"]}</label>\r\n\r\n                            <Controller\r\n                              name={paymentForm.country.name}\r\n                              control={control}\r\n                              rules={paymentForm.country.validate}\r\n                              render={props => {\r\n                                return (\r\n                                  <select onChange={(e) => { props.onChange(e.target.value); getState(e.target.value); onChangeShipping() }} value={props.value}>\r\n                                    <option>{strings[\"Select a country\"]}</option>\r\n                                    {\r\n\r\n                                      shipCountryData.map((data, i) => {\r\n                                       //getShippingCountry(currentLanguageCode).map((data, i) => {\r\n                                        // shipCountryData.map((data, i) => {\r\n                                      \r\n                                        return <option key={i} value={data.code}>{data.name}</option>\r\n                                      })\r\n                                    }\r\n                                  </select>\r\n                                )\r\n                              }}\r\n                            />\r\n\r\n                            {errors[paymentForm.country.name] && <p className=\"error-msg\">{errors[paymentForm.country.name].message}</p>}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-lg-12\">\r\n                          <div className=\"billing-info mb-20\">\r\n                            <label>{strings[\"Town/City\"]}</label>\r\n                            <input type=\"text\" name={paymentForm.city.name} ref={register(paymentForm.city.validate)} />\r\n                            {errors[paymentForm.city.name] && <p className=\"error-msg\">{errors[paymentForm.city.name].message}</p>}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-6\">\r\n                          <div className=\"billing-select mb-20\">\r\n                            <label>{strings[\"State\"]}</label>\r\n                            {\r\n                              stateData && stateData.length > 0 ?\r\n                                <Controller\r\n                                  name={paymentForm.stateProvince.name}\r\n                                  control={control}\r\n                                  rules={paymentForm.stateProvince.validate}\r\n                                  render={props => {\r\n                                    return (\r\n                                      <select onBlur={changeAddress()} onChange={(e) => props.onChange(e.target.value)} value={props.value}>\r\n                                        <option>{strings[\"State / province\"]}</option>\r\n                                        {\r\n                                          stateData.map((data, i) => {\r\n                                            return <option key={i} value={data.code}>{data.name}</option>\r\n                                          })\r\n                                        }\r\n                                      </select>)\r\n                                  }}\r\n                                />\r\n                                :\r\n                                <input type=\"text\" name={paymentForm.stateProvince.name} ref={register(paymentForm.stateProvince.validate)} />\r\n                            }\r\n                            {errors[paymentForm.stateProvince.name] && <p className=\"error-msg\">{errors[paymentForm.stateProvince.name].message}</p>}\r\n\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-6\">\r\n                          <div className=\"billing-info mb-20\">\r\n                            <label>{strings[\"Postcode\"]}</label>\r\n                            <input type=\"text\" name={paymentForm.postalCode.name} ref={register(paymentForm.postalCode.validate)} onChange={() => {\r\n\r\n                              clearTimeout(timer);\r\n                              setTimer(setTimeout(function () {\r\n                                onChangeShipping()\r\n                              }, 500))\r\n                            }} />\r\n                            {errors[paymentForm.postalCode.name] && <p className=\"error-msg\">{errors[paymentForm.postalCode.name].message}</p>}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-6\">\r\n                          <div className=\"billing-info mb-20\">\r\n                            <label>{strings[\"Phone\"]}</label>\r\n                            <input type=\"text\" name={paymentForm.phone.name} ref={register(paymentForm.phone.validate)} />\r\n                            {errors[paymentForm.phone.name] && <p className=\"error-msg\">{errors[paymentForm.phone.name].message}</p>}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-6\">\r\n                          <div className=\"billing-info mb-20\">\r\n                            <label>{strings[\"Email address\"]}</label>\r\n                            <input type=\"text\" name={paymentForm.email.name} ref={register(paymentForm.email.validate)} />\r\n                            {errors[paymentForm.email.name] && <p className=\"error-msg\">{errors[paymentForm.email.name].message}</p>}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      {\r\n                        !userData &&\r\n                        <div className=\"login-toggle-btn\">\r\n                          <input type=\"checkbox\" value={isAccount} onChange={() => setIsAccount(!isAccount)} />\r\n                          <label className=\"ml-10 mb-20\">{strings[\"Create an account\"]}</label>\r\n                        </div>\r\n                      }\r\n                      {\r\n                        isAccount &&\r\n                        <div>\r\n                          <p className=\"main-color\"> Create an account by entering the information below.If you are a returning customer please login using the link at the top of the page.</p>\r\n                          <div className=\"col-lg-12\">\r\n                            <div className=\"billing-info mb-20\">\r\n                              <label>Account Password</label>\r\n                              <input type=\"password\" name={paymentForm.password.name} ref={register(paymentForm.password.validate)} onChange={(e) => onPasswordChange(e)} />\r\n                              {errors[paymentForm.password.name] && <p className=\"error-msg\">{errors[paymentForm.password.name].message}</p>}\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"col-lg-12\">\r\n                            <div className=\"billing-info mb-20\">\r\n                              <label>Repeat Account Password</label>\r\n                              <input type=\"password\" name={paymentForm.repeatPassword.name} ref={register(paymentForm.repeatPassword.validate)} onChange={(e) => onConfirmPassword(e)} />\r\n                              {errors[paymentForm.repeatPassword.name] && <p className=\"error-msg\">{errors[paymentForm.repeatPassword.name].message}</p>}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      }\r\n                      <div className=\"login-toggle-btn\">\r\n                        <input type=\"checkbox\" value={isShipping} onChange={onChangeShipAddress} />\r\n                        <label className=\"ml-10 mb-20\">{strings[\"SHIP TO A DIFFERENT ADDRESS?\"]}</label>\r\n                      </div>\r\n                      {\r\n                        isShipping &&\r\n                        <div className=\"billing-info-wrap\">\r\n                          <h3>{strings[\"Shipping Details\"]}</h3>\r\n                          <div className=\"row\">\r\n\r\n                            <div className=\"col-lg-6 col-md-6\">\r\n                              <div className=\"billing-info mb-20\">\r\n                                <label>{strings[\"First Name\"]}</label>\r\n                                <input type=\"text\" name={paymentForm.shipFirstName.name} ref={register(paymentForm.shipFirstName.validate)} />\r\n                                {errors[paymentForm.shipFirstName.name] && <p className=\"error-msg\">{errors[paymentForm.shipFirstName.name].message}</p>}\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"col-lg-6 col-md-6\">\r\n                              <div className=\"billing-info mb-20\">\r\n                                <label>{strings[\"Last Name\"]}</label>\r\n                                <input type=\"text\" name={paymentForm.shipLastName.name} ref={register(paymentForm.shipLastName.validate)} />\r\n                                {errors[paymentForm.shipLastName.name] && <p className=\"error-msg\">{errors[paymentForm.shipLastName.name].message}</p>}\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"col-lg-12\">\r\n                              <div className=\"billing-info mb-20\">\r\n                                <label>{strings[\"Company Name\"]}</label>\r\n                                <input type=\"text\" name={paymentForm.shipCompany.name} ref={register(paymentForm.shipCompany.validate)} />\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div className=\"col-lg-12\">\r\n                              <div className=\"billing-info mb-20\">\r\n                                <label>{strings[\"Street Address\"]}</label>\r\n                                <input\r\n                                  className=\"billing-address\"\r\n                                  placeholder={strings[\"House number and street name\"]}\r\n                                  type=\"text\"\r\n                                  name={paymentForm.shipAddress.name}\r\n                                  ref={register(paymentForm.shipAddress.validate)}\r\n                                />\r\n                                {errors[paymentForm.shipAddress.name] && <p className=\"error-msg\">{errors[paymentForm.shipAddress.name].message}</p>}\r\n\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"col-lg-12\">\r\n                              <div className=\"billing-select mb-20\">\r\n                                <label>{strings[\"Country\"]}</label>\r\n\r\n                                <Controller\r\n                                  name={paymentForm.shipCountry.name}\r\n                                  control={control}\r\n                                  rules={paymentForm.shipCountry.validate}\r\n                                  render={props => {\r\n                                    return (\r\n                                      <select onChange={(e) => { props.onChange(e.target.value); getShippingState(e.target.value); onChangeShipping() }} value={props.value}>\r\n                                        <option>{strings[\"Select a country\"]}</option>\r\n                                        {\r\n\r\n                                          shipCountryData.map((data, i) => {\r\n                                            return <option key={i} value={data.code}>{data.name}</option>\r\n                                          })\r\n                                        }\r\n                                      </select>\r\n                                    )\r\n                                  }}\r\n                                />\r\n\r\n                                {errors[paymentForm.shipCountry.name] && <p className=\"error-msg\">{errors[paymentForm.shipCountry.name].message}</p>}\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"col-lg-12\">\r\n                              <div className=\"billing-info mb-20\">\r\n                                <label>{strings[\"Town/City\"]}</label>\r\n                                <input type=\"text\" name={paymentForm.shipCity.name} ref={register(paymentForm.shipCity.validate)} />\r\n                                {errors[paymentForm.shipCity.name] && <p className=\"error-msg\">{errors[paymentForm.shipCity.name].message}</p>}\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"col-lg-6 col-md-6\">\r\n                              <div className=\"billing-select mb-20\">\r\n                                <label>{strings[\"State\"]}</label>\r\n                                {\r\n                                  shipStateData && shipStateData.length > 0 ?\r\n                                    <Controller\r\n                                      name={paymentForm.shipStateProvince.name}\r\n                                      control={control}\r\n                                      rules={paymentForm.shipStateProvince.validate}\r\n                                      render={props => {\r\n                                        return (\r\n                                          <select onChange={(a) => console.log('-----'+a)} value={props.value}>\r\n                                            <option>{strings[\"State / Province\"]}</option>\r\n                                            {\r\n                                              shipStateData.map((data, i) => {\r\n                                                return <option key={i} value={data.code}>{data.name}</option>\r\n                                              })\r\n                                            }\r\n                                          </select>)\r\n                                      }}\r\n                                    />\r\n                                    :\r\n                                    <input type=\"text\" name={paymentForm.shipStateProvince.name} ref={register(paymentForm.shipStateProvince.validate)} />\r\n                                }\r\n                                {errors[paymentForm.shipStateProvince.name] && <p className=\"error-msg\">{errors[paymentForm.shipStateProvince.name].message}</p>}\r\n\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"col-lg-6 col-md-6\">\r\n                              <div className=\"billing-info mb-20\">\r\n                                <label>{strings[\"Postcode\"]}</label>\r\n                                <input type=\"text\" name={paymentForm.shipPostalCode.name} ref={register(paymentForm.shipPostalCode.validate)} onChange={() => {\r\n                                  clearTimeout(timer);\r\n                                  setTimer(setTimeout(function () {\r\n                                    onChangeShipping()\r\n                                  }, 500))\r\n                                }} />\r\n                                {errors[paymentForm.shipPostalCode.name] && <p className=\"error-msg\">{errors[paymentForm.shipPostalCode.name].message}</p>}\r\n                              </div>\r\n                            </div>\r\n                            {/* <div className=\"col-lg-6 col-md-6\">\r\n                              <div className=\"billing-info mb-20\">\r\n                                <label>Phone</label>\r\n                                <input type=\"text\" name={paymentForm.shipPhone.name} ref={register(paymentForm.shipPhone.validate)} />\r\n                                {errors[paymentForm.shipPhone.name] && <p className=\"error-msg\">{errors[paymentForm.shipPhone.name].message}</p>}\r\n                              </div>\r\n                            </div>\r\n                            <div className=\"col-lg-6 col-md-6\">\r\n                              <div className=\"billing-info mb-20\">\r\n                                <label>Email Address</label>\r\n                                <input type=\"text\" name={paymentForm.shipEmail.name} ref={register(paymentForm.shipEmail.validate)} />\r\n                                {errors[paymentForm.shipEmail.name] && <p className=\"error-msg\">{errors[paymentForm.shipEmail.name].message}</p>}\r\n                              </div>\r\n                            </div> */}\r\n                          </div>\r\n                        </div>\r\n                      }\r\n                      <div className=\"additional-info-wrap\">\r\n                        <h4>{strings[\"Additional information\"]}</h4>\r\n                        <div className=\"additional-info\">\r\n                          <label>{strings[\"Order notes\"]}</label>\r\n                          <textarea\r\n                            placeholder={strings[\"Notes about your order, e.g. special notes for delivery.\"]}\r\n                            name=\"message\"\r\n                            defaultValue={\"\"}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"col-lg-6\">\r\n                    <div className=\"your-order-area\">\r\n                      <h3>{strings[\"Your order\"]}</h3>\r\n                      <div className=\"your-order-wrap gray-bg-4\">\r\n                        <div className=\"your-order-product-info\">\r\n                          <div className=\"your-order-top\">\r\n                            <ul>\r\n                              <li>{strings[\"Product\"]}</li>\r\n                              <li>{strings[\"Total\"]}</li>\r\n                            </ul>\r\n                          </div>\r\n                          <div className=\"your-order-middle\">\r\n                            <ul>\r\n                              {cartItems.products.map((cartItem, key) => {\r\n\r\n                                return (\r\n                                  <li key={key}>\r\n                                    <span className=\"order-middle-left\" style={{ width: 220 }}>\r\n                                      {cartItem.description.name}\r\n                                    </span>{\" \"}\r\n                                    <span>X {cartItem.quantity}</span>\r\n                                    <span className=\"order-price\">\r\n                                      {\r\n                                        cartItem.finalPrice\r\n                                      }\r\n                                    </span>\r\n                                  </li>\r\n                                );\r\n                              })}\r\n                            </ul>\r\n                          </div>\r\n                          <div className=\"your-order-sub-total\">\r\n                            {\r\n                              shippingQuote.length > 0 &&\r\n                              shippingQuote.map((quote, i) => {\r\n                                return (\r\n                                  quote.title !== 'Total' &&\r\n                                  <ul className=\"mb-20\" key={i}>\r\n                                    <li className=\"order-total\">{quote.title}</li>\r\n                                    <li>\r\n                                      {quote.total}\r\n                                    </li>\r\n                                  </ul>)\r\n                              })\r\n                            }\r\n\r\n                          </div>\r\n                          {\r\n                            config.displayShipping && shippingOptions &&\r\n                          <div className=\"your-order-bottom\">\r\n                            { \r\n                              <div className=\"shippingRow\">\r\n                                <ul><li className=\"your-order-shipping\">Shipping Fees</li></ul>\r\n\r\n                                <ul>\r\n\r\n                                  {\r\n                                    shippingOptions.map((value, i) => {\r\n                                      return (<li key={i}>\r\n                                        <div className=\"login-toggle-btn\">\r\n                                          <input type=\"radio\" value={value.shippingQuoteOptionId} onChange={() => { setSelectedOptions(value.shippingQuoteOptionId); shippingQuoteChange(value.shippingQuoteOptionId) }} checked={selectedOptions === value.shippingQuoteOptionId} />\r\n                                          <label className=\"ml-10 mb-20\">{value.optionName} - {value.optionPriceText}</label>\r\n                                        </div>\r\n                                      </li>)\r\n                                    })\r\n                                  }\r\n                                  <li style={{ textAlign: 'center', fontSize: 12, color: 'grey' }}> This option let you reserve you order items through the online system and pick\r\n                                        up your order by yourself at the store. this option is also offered when no\r\n                                        other shipping option is available for your region.</li>\r\n                                </ul>\r\n                              </div>\r\n\r\n                            }\r\n\r\n                            {/* {\r\n                              config.displayShipping && !shippingOptions &&\r\n                              <ul>\r\n                                <li className=\"your-order-shipping\">Shipping Fees</li>\r\n                                <li>Free shipping</li>\r\n                              </ul>\r\n                            } */}\r\n\r\n                          </div>\r\n                          }\r\n                          <div className=\"your-order-total\">\r\n                            <ul>\r\n                              <li className=\"order-total\">Total</li>\r\n                              <li>\r\n                                {\r\n                                  shippingQuote.length > 0 &&\r\n                                  shippingQuote.map((quote, i) => {\r\n                                    return quote.title === 'Total' && quote.total\r\n                                  })\r\n                                }\r\n                                {/* {cartItems.displayTotal} */}\r\n                              </li>\r\n                            </ul>\r\n                          </div>\r\n                        </div>\r\n\r\n                      </div>\r\n                      {\r\n                        window._env_.APP_PAYMENT_TYPE === 'STRIPE' &&\r\n                        <div className=\"payment-method mt-25\">\r\n                          <Elements stripe={stripePromise} \r\n                            options={{locale: currentLanguageCode}}\r\n                          >\r\n                            <ElementsConsumer>\r\n                              {({ stripe, elements }) => (\r\n                                <>\r\n                                  <div className=\"card-info\">\r\n                                    <CardElement options={CARD_ELEMENT_OPTIONS} stripe={stripe} onReady={e => setRef(e)} />\r\n                                  </div>\r\n                                  <div className=\"icon-container\">\r\n                                    <i className=\"fa fa-cc-visa\" style={{ color: 'navy' }}></i>\r\n                                    <i className=\"fa fa-cc-amex\" style={{ color: 'blue' }}></i>\r\n                                    <i className=\"fa fa-cc-mastercard\" style={{ color: 'red' }}></i>\r\n                                  </div>\r\n\r\n                                  <div className=\"place-order mt-100\">\r\n                                    <div className=\"login-toggle-btn mb-20\">\r\n                                      <input type=\"checkbox\" name={paymentForm.isAgree.name} ref={register(paymentForm.isAgree.validate)} onChange={onAgreement}/>\r\n                                      <label className=\"ml-10 \">{strings[\"I agree with the terms and conditions\"]}</label>\r\n                                      {errors[paymentForm.isAgree.name] && <p className=\"error-msg\">{errors[paymentForm.isAgree.name].message}</p>}\r\n                                    </div>\r\n                                    <div>\r\n                                      {\r\n                                          watch('isAgree') && \r\n                                          <div className=\"agreement-info-wrap\" dangerouslySetInnerHTML={{ __html: agreementData.replace(/>]]/g, \"&gt;\") }}>\r\n                                            {/* <textarea\r\n                                              readOnly={true}\r\n                                              name=\"message\"\r\n                                              defaultValue={() => renderAgreementText(agreementData)}\r\n                                            /> */}\r\n                                          </div>\r\n                                      }\r\n                                    \r\n                                    </div>\r\n                                    <button type=\"button\" onClick={handleSubmit((d) => onSubmitOrder(d, elements, stripe))} className=\"btn-hover\">{strings[\"Place your order\"]}</button>\r\n                                  </div>\r\n                                </>\r\n                              )}\r\n                            </ElementsConsumer>\r\n                          </Elements>\r\n                        </div>\r\n                      }\r\n                      {\r\n                        window._env_.APP_PAYMENT_TYPE === 'NUVEI' &&\r\n                        <iframe title=\"Payment Page\" height={\"1150\"} width=\"570\" srcDoc='<form action=\"https://testpayments.nuvei.com/merchant/paymentpage\" method=\"post\">\r\n                        <input type=\"hidden\" name=\"TERMINALID\" value=\"\" />\r\n                        <input type=\"hidden\" name=\"ORDERID\" value=\"\" />\r\n                        <input type=\"hidden\" name=\"CURRENCY\" value=\"\" />\r\n                        <input type=\"hidden\" name=\"AMOUNT\" value=\"\" />\r\n                        <input type=\"hidden\" name=\"DATETIME\" value=\"22-01-2021:10:43:01:200\" />\r\n                        <input type=\"hidden\" name=\"HASH\" value=\"8636622c1dd4039783cd0fbcffd53a6ce2ceab7d0e183e8ce1b8043e3cdedebe3b6665c5e87d3b268e85217f6c11f15f09f86764d82b0bd923c8c19e9209296d\" />\r\n                        \r\n                        <button type=\"submit\"  style=\"font-weight: 500;\r\n                        line-height: 1;\r\n                        z-index: 9;\r\n                        display: block;\r\n                        width: 100%;\r\n                        padding: 18px 20px;\r\n                        text-align: center;\r\n                        letter-spacing: 1px;\r\n                        text-transform: uppercase;\r\n                        color: #fff;\r\n                        border: none;\r\n                        border-radius: 50px;\r\n                        background: none;\r\n                        background-color: #fb799c;\"className=\"btn-hover\">Pay now</button>\r\n                      </form>'></iframe>\r\n                      }\r\n                      {/* // ADDED BY VIKRANT */}\r\n                      {\r\n                        window._env_.APP_PAYMENT_TYPE === 'RAZORPAY' &&\r\n                        <div className=\"place-order mt-100\">\r\n                        <button type=\"button\"  className=\"btn-hover\" onClick={handleSubmit((d) => displayRazorpay(d))}>\r\n                            {strings[\"Place your order\"]}\r\n                        </button>\r\n                        </div>\r\n                      }\r\n\r\n                          </div>\r\n                  </div>\r\n\r\n                </div>\r\n              </form>\r\n            ) : (\r\n                !isLoading && <div className=\"row\">\r\n                  <div className=\"col-lg-12\">\r\n                    <div className=\"item-empty-area text-center\">\r\n                      <div className=\"item-empty-area__icon mb-30\">\r\n                        <i className=\"pe-7s-cash\"></i>\r\n                      </div>\r\n                      <div className=\"item-empty-area__text\">\r\n                      {strings[\"No items found in checkout\"]} <br />{\" \"}\r\n                        <Link to={\"/\"}>\r\n                        {strings[\"Shop now\"]}\r\n                      </Link>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )}\r\n          </div>\r\n        </div>\r\n      </Layout>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nCheckout.propTypes = {\r\n  cartItems: PropTypes.object,\r\n  // currency: PropTypes.object,\r\n  location: PropTypes.object,\r\n  //currentLanguageCode: PropTypes.string\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    cartID: state.cartData.cartID,\r\n    // countryData: state.userData.country,\r\n    shipCountryData: state.userData.shipCountry,\r\n    stateData: state.userData.state,\r\n    shipStateData: state.userData.shipState,\r\n    currentLocation: state.userData.currentAddress,\r\n    userData: state.userData.userData,\r\n    defaultStore: state.merchantData.defaultStore,\r\n    merchant: state.merchantData.merchant,\r\n    isLoading: state.loading.isLoading,\r\n    currentLanguageCode: state.multilanguage.currentLanguageCode,\r\n    // currency: state.currencyData\r\n  };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setLoader: (value) => {\r\n      dispatch(setLoader(value));\r\n    },\r\n    getShippingCountry: (value) => {\r\n      dispatch(getShippingCountry(value));\r\n    },\r\n    getState: (code) => {//state\r\n      dispatch(getState(code));\r\n    },\r\n    getShippingState: (code) => {\r\n      dispatch(getShippingState(code));\r\n    },\r\n    deleteAllFromCart: (orderID) => {\r\n      dispatch(deleteAllFromCart(orderID));\r\n    },\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(multilanguage(Checkout));\r\n"],"sourceRoot":""}