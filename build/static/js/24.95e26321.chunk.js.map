{"version":3,"sources":["pages/other/MyAccount.js"],"names":["changePasswordForm","name","validate","required","value","message","hasSpecialChar","match","accountForm","pattern","billingForm","firstName","lastName","company","address","city","country","stateProvince","postalCode","phone","minLength","email","shipPhone","shipEmail","shipFirstName","shipLastName","shipCompany","shipAddress","shipCity","shipCountry","shipStateProvince","shipPostalCode","connect","state","countryData","userData","stateData","shipStateData","shipState","merchant","merchantData","dispatch","setLoader","setUser","data","deleteAllFromCart","getState","code","getShippingState","multilanguage","strings","location","pathname","addToast","useToasts","history","useHistory","useState","isDeleted","setIsDeleted","useForm","mode","criteriaMode","register","handleSubmit","errors","watch","setError","clearErrors","reset","billingRef","billingErr","billingSubmit","control","setValue","deliveryRef","deliveryErr","deliverySubmit","deliveryControl","setDeliveryValue","accountRef","accountErr","accountSubmit","setAccountValue","useEffect","getProfile","a","action","constant","ACTION","AUTH","CUSTOMER","PROFILE","WebService","get","response","console","log","userName","emailAddress","billing","setTimeout","zone","delivery","push","onChangePassword","PASSWORD","param","password","repeatPassword","currentPassword","post","appearance","autoDismiss","onUpdateBilling","ADDRESS","id","patch","onUpdateDelivery","onChangeAccount","onDeleteConfirm","onDelete","delete","setLocalData","to","process","headerContainerClass","headerPaddingClass","headerTop","className","defaultActiveKey","Header","Toggle","variant","eventKey","Collapse","Body","onSubmit","type","disabled","ref","url","window","_env_","APP_MAP_API_KEY","onLoad","autocomplete","google","maps","places","Autocomplete","document","getElementById","types","addListener","p","getPlace","address_components","find","i","some","short_name","undefined","pCode","long_name","componentForm","street_number","route","sublocality","array","length","addressType","val","toString","placeholder","rules","render","props","onChange","e","target","map","onPasswordChange","onConfirmPassword","onClick","showCancel","cancelBtnBsStyle","confirmBtnText","confirmBtnBsStyle","onConfirm","onCancel","title"],"mappings":"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","file":"static/js/24.95e26321.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport React, { Fragment, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport MetaTags from \"react-meta-tags\";\r\nimport { BreadcrumbsItem } from \"react-breadcrumbs-dynamic\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport Layout from \"../../layouts/Layout\";\r\nimport Breadcrumb from \"../../wrappers/breadcrumb/Breadcrumb\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport WebService from '../../util/webService';\r\nimport constant from '../../util/constant';\r\nimport { setLoader } from \"../../redux/actions/loaderActions\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\nimport { connect } from \"react-redux\";\r\nimport { getState, getShippingState } from \"../../redux/actions/userAction\";\r\nimport Script from 'react-load-script';\r\nimport { multilanguage } from \"redux-multilanguage\";\r\nimport SweetAlert from 'react-bootstrap-sweetalert';\r\nimport { deleteAllFromCart } from \"../../redux/actions/cartActions\";\r\nimport { setUser } from \"../../redux/actions/userAction\";\r\nimport { setLocalData } from '../../util/helper';\r\nconst changePasswordForm = {\r\n  userName: {\r\n    name: \"userName\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"User Name is required\"\r\n      }\r\n    }\r\n  },\r\n  currentPassword: {\r\n    name: \"currentPassword\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Current Password is required\"\r\n      }\r\n    }\r\n  },\r\n  password: {\r\n    name: \"password\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Password is required\"\r\n      },\r\n      validate: {\r\n        hasSpecialChar: (value) => (value && value.match(/^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,16}$/)) || 'Password must be minimum of 8 characters atleast one number and one special character'\r\n      }\r\n    }\r\n  },\r\n  repeatPassword: {\r\n    name: \"repeatPassword\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Repeat Password is required\"\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst accountForm = {\r\n  username: {\r\n    name: \"username\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"User Name is required\"\r\n      }\r\n    }\r\n  },\r\n  email: {\r\n    name: \"email\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Email is required\"\r\n      },\r\n      pattern: {\r\n        value: /^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i,\r\n        message: 'Please entered the valid email id'\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\nconst billingForm = {\r\n  firstName: {\r\n    name: \"firstName\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Firstname is required\"\r\n      }\r\n    }\r\n  },\r\n  lastName: {\r\n    name: \"lastName\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Lastname is required\"\r\n      }\r\n    }\r\n  },\r\n  company: {\r\n    name: \"company\"\r\n  },\r\n  address: {\r\n    name: \"address\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Address is required\"\r\n      }\r\n    }\r\n  },\r\n  city: {\r\n    name: \"city\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"City is required\"\r\n      }\r\n    }\r\n  },\r\n  country: {\r\n    name: \"country\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Country is required\"\r\n      }\r\n    }\r\n  },\r\n  stateProvince: {\r\n    name: \"stateProvince\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"State is required\"\r\n      }\r\n    }\r\n  },\r\n  postalCode: {\r\n    name: \"postalCode\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Postal code is required\"\r\n      }\r\n    }\r\n  },\r\n  phone: {\r\n    name: \"phone\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Phone number is required\"\r\n      },\r\n      minLength: {\r\n        value: 10,\r\n        message: \"Enter a 10-digit number\"\r\n      }\r\n    }\r\n  },\r\n  email: {\r\n    name: \"email\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Email is required\"\r\n      },\r\n      pattern: {\r\n        value: /^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i,\r\n        message: 'Please entered the valid email id'\r\n      }\r\n    }\r\n  },\r\n  shipPhone: {\r\n    name: \"shipPhone\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Phone number is required\"\r\n      },\r\n      minLength: {\r\n        value: 10,\r\n        message: \"Enter a 10-digit number\"\r\n      }\r\n    }\r\n  },\r\n  shipEmail: {\r\n    name: \"shipEmail\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Email is required\"\r\n      },\r\n      pattern: {\r\n        value: /^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i,\r\n        message: 'Please entered the valid email id'\r\n      }\r\n    }\r\n  },\r\n  shipFirstName: {\r\n    name: \"shipFirstName\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Firstname is required\"\r\n      }\r\n    }\r\n  },\r\n  shipLastName: {\r\n    name: \"shipLastName\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Lastname is required\"\r\n      }\r\n    }\r\n  },\r\n  shipCompany: {\r\n    name: \"shipCompany\"\r\n  },\r\n  shipAddress: {\r\n    name: \"shipAddress\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Address is required\"\r\n      }\r\n    }\r\n  },\r\n  shipCity: {\r\n    name: \"shipCity\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"City is required\"\r\n      }\r\n    }\r\n  },\r\n  shipCountry: {\r\n    name: \"shipCountry\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Country is required\"\r\n      }\r\n    }\r\n  },\r\n  shipStateProvince: {\r\n    name: \"shipStateProvince\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"State is required\"\r\n      }\r\n    }\r\n  },\r\n  shipPostalCode: {\r\n    name: \"shipPostalCode\",\r\n    validate: {\r\n      required: {\r\n        value: true,\r\n        message: \"Postal code is required\"\r\n      }\r\n    }\r\n  },\r\n}\r\nconst MyAccount = ({ setUser, deleteAllFromCart, merchant, strings, location, setLoader, getState, getShippingState, countryData, stateData, shipStateData, userData }) => {\r\n  const { pathname } = location;\r\n  const { addToast } = useToasts();\r\n  const history = useHistory();\r\n  const [isDeleted, setIsDeleted] = useState(false)\r\n  const { register, handleSubmit, errors, watch, setError, clearErrors, reset } = useForm({\r\n    mode: \"onChange\",\r\n    criteriaMode: \"all\"\r\n  });\r\n  const {\r\n    register: billingRef,\r\n    errors: billingErr,\r\n    handleSubmit: billingSubmit,\r\n    control, setValue\r\n  } = useForm({\r\n    mode: \"onChange\"\r\n  });\r\n  const {\r\n    register: deliveryRef,\r\n    errors: deliveryErr,\r\n    handleSubmit: deliverySubmit,\r\n    control: deliveryControl,\r\n    setValue: setDeliveryValue\r\n  } = useForm({\r\n    mode: \"onChange\"\r\n  });\r\n  const {\r\n    register: accountRef,\r\n    errors: accountErr,\r\n    handleSubmit: accountSubmit,\r\n    // control: accountControl,\r\n    setValue: setAccountValue,\r\n    // watch: deliveryWatch,\r\n  } = useForm({\r\n    mode: \"onChange\"\r\n  });\r\n\r\n  useEffect(() => {\r\n    getProfile()\r\n    getState()\r\n    getShippingState()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n  const getProfile = async () => {\r\n    let action = constant.ACTION.AUTH + constant.ACTION.CUSTOMER + constant.ACTION.PROFILE;\r\n    try {\r\n      let response = await WebService.get(action);\r\n      console.log(response);\r\n      if (response) {\r\n        setAccountValue('username', response.userName)\r\n        setAccountValue('email', response.emailAddress)\r\n        getState(response.billing.country)\r\n        setValue('firstName', response.billing.firstName)\r\n        setValue('lastName', response.billing.lastName)\r\n        setValue('company', response.billing.company)\r\n        setValue('address', response.billing.address)\r\n        setValue('country', response.billing.country)\r\n        setValue('city', response.billing.city)\r\n        // setValue('stateProvince', response.billing.stateProvince)\r\n        setTimeout(() => {\r\n          setValue('stateProvince', response.billing.zone)\r\n        }, 2000)\r\n        setValue('postalCode', response.billing.postalCode)\r\n        setValue('phone', response.billing.phone)\r\n        setValue('email', response.emailAddress)\r\n        if (response.delivery) {\r\n          getShippingState(response.delivery.country)\r\n          setDeliveryValue('shipFirstName', response.delivery.firstName)\r\n          setDeliveryValue('shipLastName', response.delivery.lastName)\r\n          setDeliveryValue('shipCompany', response.delivery.company)\r\n          setDeliveryValue('shipAddress', response.delivery.address)\r\n          setDeliveryValue('shipCountry', response.delivery.country)\r\n          setDeliveryValue('shipCity', response.delivery.city)\r\n          // setValue('stateProvince', response.billing.stateProvince)\r\n          setTimeout(() => {\r\n            setDeliveryValue('shipStateProvince', response.delivery.zone)\r\n          }, 2000)\r\n\r\n          setDeliveryValue('shipPostalCode', response.delivery.postalCode)\r\n          setDeliveryValue('shipPhone', response.delivery.phone)\r\n          // setValue('email', response.emailAddress)\r\n        }\r\n      }\r\n      //   // setConfig(response)\r\n    }\r\n    catch (error) {\r\n      history.push('/login')\r\n    }\r\n  }\r\n  const onChangePassword = async (data) => {\r\n    setLoader(true)\r\n    try {\r\n      let action = constant.ACTION.CUSTOMER + constant.ACTION.PASSWORD;\r\n      let param = {\r\n        \"password\": data.password,\r\n        \"repeatPassword\": data.repeatPassword,\r\n        \"current\": data.currentPassword,\r\n        \"username\": data.userName,\r\n      }\r\n      let response = await WebService.post(action, param);\r\n      if (response) {\r\n        reset({})\r\n        addToast(\"Your password has been changed successfully!\", { appearance: \"success\", autoDismiss: true });\r\n      }\r\n      setLoader(false)\r\n    } catch (error) {\r\n      addToast(\"Your current password is wrong\", { appearance: \"error\", autoDismiss: true });\r\n      setLoader(false)\r\n    }\r\n  }\r\n  const onConfirmPassword = (e) => {\r\n    if (watch('password') !== e.target.value) {\r\n      return setError(\r\n        changePasswordForm.repeatPassword.name,\r\n        {\r\n          type: \"notMatch\",\r\n          message: \"Repeat Password should be the same as a password\"\r\n        }\r\n      );\r\n    }\r\n\r\n  }\r\n  const onPasswordChange = (e) => {\r\n    if (watch('repeatPassword') !== '' && watch('repeatPassword') !== e.target.value) {\r\n      return setError(\r\n        changePasswordForm.repeatPassword.name,\r\n        {\r\n          type: \"notMatch\",\r\n          message: \"Repeat Password should be the same as a password\"\r\n        }\r\n      );\r\n\r\n    } else {\r\n      clearErrors(changePasswordForm.repeatPassword.name);\r\n    }\r\n\r\n  }\r\n\r\n  const handleScriptLoad = () => {\r\n    // Declare Options For Autocomplete\r\n    const options = {\r\n      types: ['address'],\r\n    };\r\n    // console.log('fsdfsdfsdfdsf')\r\n    // Initialize Google Autocomplete\r\n    /*global google*/ // To disable any eslint 'google not defined' errors\r\n    let autocomplete = new google.maps.places.Autocomplete(\r\n      document.getElementById('autocomplete'),\r\n      options,\r\n    );\r\n    // console.log(autocomplete)\r\n    // Avoid paying for data that you don't need by restricting the set of\r\n    // place fields that are returned to just the address components and formatted\r\n    // address.\r\n    // this.autocomplete.setFields(['address_components', 'formatted_address']);\r\n\r\n    // Fire Event when a suggested name is selected\r\n    autocomplete.addListener('place_changed', () => {\r\n      let p = autocomplete.getPlace();\r\n      // console.log(p);\r\n      setValue('country', p.address_components.find(i => i.types.some(i => i === \"country\")).short_name)\r\n      getState(p.address_components.find(i => i.types.some(i => i === \"country\")).short_name)\r\n\r\n      let city = p.address_components.find(i => i.types.some(i => i === \"locality\"))\r\n      if (city !== undefined) {\r\n        setValue('city', city.short_name)\r\n      }\r\n      let pCode = p.address_components.find(i => i.types.some(i => i === \"postal_code\"))\r\n      if (pCode !== undefined) {\r\n        setValue('postalCode', pCode.long_name)\r\n      }\r\n\r\n      var componentForm = {\r\n        street_number: 'short_name',\r\n        route: 'long_name',\r\n        sublocality: 'sublocality'\r\n      };\r\n      let array = [];\r\n      for (var i = 0; i < p.address_components.length; i++) {\r\n        var addressType = p.address_components[i].types[0];\r\n        if (componentForm[addressType]) {\r\n          var val = p.address_components[i][componentForm[addressType]];\r\n          array.push(val);\r\n\r\n        }\r\n      }\r\n      setValue('address', array.toString())\r\n      setTimeout(() => {\r\n        setValue('stateProvince', p.address_components.find(i => i.types.some(i => i === \"administrative_area_level_1\")).short_name)\r\n      }, 2000);\r\n\r\n    });\r\n  }\r\n  const handleDeliveryScriptLoad = () => {\r\n    // Declare Options For Autocomplete\r\n    const options = {\r\n      types: ['address'],\r\n    };\r\n    // console.log('fsdfsdfsdfdsf')\r\n    // Initialize Google Autocomplete\r\n\r\n    let autocomplete = new google.maps.places.Autocomplete(\r\n      document.getElementById('autocomplete1'),\r\n      options,\r\n    );\r\n    // console.log(autocomplete)\r\n    // Avoid paying for data that you don't need by restricting the set of\r\n    // place fields that are returned to just the address components and formatted\r\n    // address.\r\n    // this.autocomplete.setFields(['address_components', 'formatted_address']);\r\n\r\n    // Fire Event when a suggested name is selected\r\n    autocomplete.addListener('place_changed', () => {\r\n      let p = autocomplete.getPlace();\r\n      console.log(p);\r\n      setDeliveryValue('shipCountry', p.address_components.find(i => i.types.some(i => i === \"country\")).short_name)\r\n      getShippingState(p.address_components.find(i => i.types.some(i => i === \"country\")).short_name)\r\n\r\n      let city = p.address_components.find(i => i.types.some(i => i === \"locality\"))\r\n      if (city !== undefined) {\r\n        setDeliveryValue('shipCity', city.short_name)\r\n      }\r\n      let pCode = p.address_components.find(i => i.types.some(i => i === \"postal_code\"))\r\n      if (pCode !== undefined) {\r\n        setDeliveryValue('shipPostalCode', pCode.long_name)\r\n      }\r\n\r\n      var componentForm = {\r\n        street_number: 'short_name',\r\n        route: 'long_name',\r\n        sublocality: 'sublocality'\r\n      };\r\n      let array = [];\r\n      for (var i = 0; i < p.address_components.length; i++) {\r\n        var addressType = p.address_components[i].types[0];\r\n        if (componentForm[addressType]) {\r\n          var val = p.address_components[i][componentForm[addressType]];\r\n          array.push(val);\r\n\r\n        }\r\n      }\r\n      setDeliveryValue('shipAddress', array.toString())\r\n      setTimeout(() => {\r\n        setDeliveryValue('shipStateProvince', p.address_components.find(i => i.types.some(i => i === \"administrative_area_level_1\")).short_name)\r\n      }, 2000);\r\n    });\r\n  }\r\n\r\n  const onUpdateBilling = async (data) => {\r\n    // console.log(data)\r\n    setLoader(true)\r\n    try {\r\n      let action = constant.ACTION.AUTH + constant.ACTION.CUSTOMER + constant.ACTION.ADDRESS;\r\n      let param = {\r\n        \"id\": userData.id,\r\n        \"billing\": {\r\n          \"company\": data.company,\r\n          \"address\": data.address,\r\n          \"city\": data.city,\r\n          \"postalCode\": data.postalCode,\r\n          \"stateProvince\": data.stateProvince,\r\n          \"country\": data.country,\r\n          \"zone\": data.stateProvince,\r\n          \"firstName\": data.firstName,\r\n          \"lastName\": data.lastName,\r\n          \"phone\": data.phone\r\n        }\r\n        // \"delivery\": {\r\n        //   \"company\": deliveryWatch('shipCompany'),\r\n        //   \"address\": deliveryWatch('shipAddress'),\r\n        //   \"city\": deliveryWatch('shipCity'),\r\n        //   \"postalCode\": deliveryWatch('shipPostalCode'),\r\n        //   \"stateProvince\": deliveryWatch('shipStateProvince'),\r\n        //   \"country\": deliveryWatch('shipCountry'),\r\n        //   \"zone\": deliveryWatch('shipStateProvince'),\r\n        //   \"firstName\": deliveryWatch('shipFirstName'),\r\n        //   \"lastName\": deliveryWatch('shipLastName'),\r\n        //   \"phone\": deliveryWatch('shipPhone')\r\n        // }\r\n      }\r\n      // console.log(param);\r\n      await WebService.patch(action, param);\r\n      // if (response) {\r\n      // reset({})\r\n      addToast(\"Your billing address has been updated successfully.\", { appearance: \"success\", autoDismiss: true });\r\n      // }\r\n      setLoader(false)\r\n    } catch (error) {\r\n      addToast(\"Your billing address has been updated fail.\", { appearance: \"error\", autoDismiss: true });\r\n      setLoader(false)\r\n    }\r\n  }\r\n  const onUpdateDelivery = async (data) => {\r\n    setLoader(true)\r\n    try {\r\n      let action = constant.ACTION.AUTH + constant.ACTION.CUSTOMER + constant.ACTION.ADDRESS;\r\n      let param = {\r\n        \"id\": userData.id,\r\n        // \"billing\": {\r\n        //   \"company\": billingWatch('company'),\r\n        //   \"address\": billingWatch('address'),\r\n        //   \"city\": billingWatch('city'),\r\n        //   \"postalCode\": billingWatch('postalCode'),\r\n        //   \"stateProvince\": billingWatch('stateProvince'),\r\n        //   \"country\": billingWatch('country'),\r\n        //   \"zone\": billingWatch('stateProvince'),\r\n        //   \"firstName\": billingWatch('firstName'),\r\n        //   \"lastName\": billingWatch('lastName'),\r\n        //   \"phone\": billingWatch('phone')\r\n        // },\r\n        \"delivery\": {\r\n          \"company\": data.shipCompany,\r\n          \"address\": data.shipAddress,\r\n          \"city\": data.shipCity,\r\n          \"postalCode\": data.shipPostalCode,\r\n          \"stateProvince\": data.shipStateProvince,\r\n          \"country\": data.shipCountry,\r\n          \"zone\": data.shipStateProvince,\r\n          \"firstName\": data.shipFirstName,\r\n          \"lastName\": data.shipLastName,\r\n          \"phone\": data.shipPhone\r\n        }\r\n      }\r\n      console.log(param);\r\n      await WebService.patch(action, param);\r\n      // if (response) {\r\n      // reset({})\r\n      addToast(\"Your delivery address has been updated successfully.\", { appearance: \"success\", autoDismiss: true });\r\n      // }\r\n      setLoader(false)\r\n    } catch (error) {\r\n      addToast(\"Your delivery address has been updated fail.\", { appearance: \"error\", autoDismiss: true });\r\n      setLoader(false)\r\n    }\r\n  }\r\n\r\n  const onChangeAccount = async (data) => {\r\n    setLoader(true)\r\n    try {\r\n      let action = constant.ACTION.AUTH + constant.ACTION.CUSTOMER;\r\n      let param = {\r\n        emailAddress: data.email\r\n      }\r\n      // console.log(param);\r\n      await WebService.patch(action, param);\r\n      // if (response) {\r\n      // reset({})\r\n      addToast(\"Your account has been updated successfully.\", { appearance: \"success\", autoDismiss: true });\r\n      // }\r\n      setLoader(false)\r\n    } catch (error) {\r\n      addToast(\"Your account has been updated fail.\", { appearance: \"error\", autoDismiss: true });\r\n      setLoader(false)\r\n    }\r\n  }\r\n  const onDeleteConfirm = () => {\r\n    console.log('confrim')\r\n    setIsDeleted(!isDeleted)\r\n  }\r\n  const onDelete = async () => {\r\n    console.log('delete')\r\n    console.log('delete')\r\n    onDeleteConfirm()\r\n    setLoader(true)\r\n    try {\r\n      let action = constant.ACTION.AUTH + constant.ACTION.CUSTOMER;\r\n\r\n\r\n      await WebService.delete(action);\r\n\r\n      addToast(\"Your account has been deleted successfully.\", { appearance: \"success\", autoDismiss: true });\r\n      history.push('/login')\r\n      setUser('')\r\n      setLocalData('token', '')\r\n      deleteAllFromCart()\r\n      setLoader(false)\r\n    } catch (error) {\r\n      addToast(\"Your account has been deleted fail.\", { appearance: \"error\", autoDismiss: true });\r\n      setLoader(false)\r\n    }\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <MetaTags>\r\n        <title>{merchant.name} | {strings[\"My Account\"]}</title>\r\n        {/* <meta\r\n          name=\"description\"\r\n          content=\"Compare page of flone react minimalist eCommerce template.\"\r\n        /> */}\r\n      </MetaTags>\r\n      <BreadcrumbsItem to={process.env.PUBLIC_URL + \"/\"}>{strings[\"Home\"]}</BreadcrumbsItem>\r\n      <BreadcrumbsItem to={process.env.PUBLIC_URL + pathname}>\r\n        {strings[\"My Account\"]}\r\n      </BreadcrumbsItem>\r\n      <Layout headerContainerClass=\"container-fluid\"\r\n        headerPaddingClass=\"header-padding-2\"\r\n        headerTop=\"visible\">\r\n        {/* breadcrumb */}\r\n        <Breadcrumb />\r\n        <div className=\"myaccount-area pb-80 pt-100\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"ml-auto mr-auto col-lg-9\">\r\n                <div className=\"myaccount-wrapper\">\r\n                  <Accordion defaultActiveKey=\"3\">\r\n                    <Card className=\"single-my-account mb-20\">\r\n                      <Card.Header className=\"panel-heading\">\r\n                        <Accordion.Toggle variant=\"link\" eventKey=\"3\">\r\n                          <h3 className=\"panel-title\">\r\n                            <span>1 .</span> {strings[\"Your account\"]}\r\n                          </h3>\r\n                        </Accordion.Toggle>\r\n                      </Card.Header>\r\n                      <Accordion.Collapse eventKey=\"3\">\r\n                        <Card.Body>\r\n                          <div className=\"myaccount-info-wrapper\">\r\n                            <div className=\"account-info-wrapper\">\r\n                              <h4>{strings[\"Your account\"]}</h4>\r\n                            </div>\r\n                            <form onSubmit={accountSubmit(onChangeAccount)}>\r\n                              <div className=\"row\">\r\n                                <div className=\"col-lg-12 col-md-12\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>{strings[\"User Name\"]}</label>\r\n                                    <input type=\"text\" name={accountForm.username.name} disabled ref={accountRef(accountForm.username.validate)} />\r\n                                    {accountErr[accountForm.username.name] && <p className=\"error-msg\">{errors[accountForm.username.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-12 col-md-12\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>{strings[\"Email address\"]}</label>\r\n                                    <input type=\"text\" name={accountForm.email.name} ref={accountRef(accountForm.email.validate)} />\r\n                                    {accountErr[accountForm.email.name] && <p className=\"error-msg\">{accountErr[accountForm.email.name].message}</p>}\r\n\r\n                                  </div>\r\n                                </div>\r\n\r\n                              </div>\r\n\r\n                              <div className=\"billing-back-btn\">\r\n                                <div className=\"billing-btn\">\r\n                                  <button type=\"submit\">{strings[\"Continue\"]}</button>\r\n                                </div>\r\n                              </div>\r\n                            </form>\r\n                          </div>\r\n                        </Card.Body>\r\n                      </Accordion.Collapse>\r\n                    </Card>\r\n\r\n                    <Card className=\"single-my-account mb-20\">\r\n                      <Card.Header className=\"panel-heading\">\r\n                        <Accordion.Toggle variant=\"link\" eventKey=\"0\">\r\n                          <h3 className=\"panel-title\">\r\n                            <span>2 .</span> {strings[\"Billing Address\"]}{\" \"}\r\n                          </h3>\r\n                        </Accordion.Toggle>\r\n                      </Card.Header>\r\n                      <Accordion.Collapse eventKey=\"0\">\r\n                        <Card.Body>\r\n                          <div className=\"myaccount-info-wrapper\">\r\n                            <div className=\"account-info-wrapper\">\r\n                              <h4>{strings[\"Billing Information\"]}</h4>\r\n                              {/* <h5>Your Personal Details</h5> */}\r\n                            </div>\r\n                            <form onSubmit={billingSubmit(onUpdateBilling)}>\r\n                              <div className=\"row\">\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>{strings[\"First Name\"]}</label>\r\n                                    <input type=\"text\" name={billingForm.firstName.name} ref={billingRef(billingForm.firstName.validate)} />\r\n                                    {billingErr[billingForm.firstName.name] && <p className=\"error-msg\">{billingErr[billingForm.firstName.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>{strings[\"Last Name\"]}</label>\r\n                                    <input type=\"text\" name={billingForm.lastName.name} ref={billingRef(billingForm.lastName.validate)} />\r\n                                    {billingErr[billingForm.lastName.name] && <p className=\"error-msg\">{billingErr[billingForm.lastName.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-12\">\r\n                                  <div className=\"billing-info mb-20\">\r\n                                    <label>{strings[\"Company Name\"]}</label>\r\n                                    <input type=\"text\" name={billingForm.company.name} ref={billingRef(billingForm.company.validate)} />\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-12\">\r\n                                  <div className=\"billing-info mb-20\">\r\n                                    <Script\r\n                                      url={\"https://maps.googleapis.com/maps/api/js?key=\" + window._env_.APP_MAP_API_KEY + \"&libraries=places\"}\r\n                                      onLoad={handleScriptLoad}\r\n                                    />\r\n                                    <label>{strings[\"Street Address\"]}</label>\r\n                                    <input\r\n                                      className=\"billing-info\"\r\n                                      placeholder={strings[\"House number and street name\"]}\r\n                                      type=\"text\"\r\n                                      id=\"autocomplete\"\r\n                                      name={billingForm.address.name}\r\n                                      ref={billingRef(billingForm.address.validate)}\r\n                                    />\r\n                                    {billingErr[billingForm.address.name] && <p className=\"error-msg\">{billingErr[billingForm.address.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info mb-20\">\r\n                                    <label>{strings[\"Country\"]}</label>\r\n                                    <Controller\r\n                                      name={billingForm.country.name}\r\n                                      control={control}\r\n                                      rules={billingForm.country.validate}\r\n                                      render={props => {\r\n                                        return (\r\n                                          <select onChange={(e) => { props.onChange(e.target.value); getState(e.target.value); }} value={props.value}>\r\n                                            <option>{strings[\"Select a country\"]}</option>\r\n                                            {\r\n\r\n                                              countryData.map((data, i) => {\r\n                                                return <option key={i} value={data.code}>{data.name}</option>\r\n                                              })\r\n                                            }\r\n                                          </select>\r\n                                        )\r\n                                      }}\r\n                                    />\r\n                                    {billingErr[billingForm.country.name] && <p className=\"error-msg\">{billingErr[billingForm.country.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info mb-20\">\r\n                                    <label>{strings[\"State\"]}</label>\r\n                                    {\r\n                                      stateData && stateData.length > 0 ?\r\n                                        <Controller\r\n                                          name={billingForm.stateProvince.name}\r\n                                          control={control}\r\n                                          rules={billingForm.stateProvince.validate}\r\n                                          render={props => {\r\n                                            return (\r\n                                              <select onChange={(e) => props.onChange(e.target.value)} value={props.value}>\r\n                                                <option>{strings[\"Select a state\"]}</option>\r\n                                                {\r\n                                                  stateData.map((data, i) => {\r\n                                                    return <option key={i} value={data.code}>{data.name}</option>\r\n                                                  })\r\n                                                }\r\n                                              </select>)\r\n                                          }}\r\n                                        />\r\n                                        :\r\n                                        <input type=\"text\" name={billingForm.stateProvince.name} ref={billingRef(billingForm.stateProvince.validate)} />\r\n                                    }\r\n                                    {billingErr[billingForm.stateProvince.name] && <p className=\"error-msg\">{billingErr[billingForm.stateProvince.name].message}</p>}\r\n\r\n                                    {/* <input type=\"text\" /> */}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info mb-20\">\r\n                                    <label>{strings[\"Town/City\"]}</label>\r\n                                    <input type=\"text\" name={billingForm.city.name} ref={billingRef(billingForm.city.validate)} />\r\n                                    {billingErr[billingForm.city.name] && <p className=\"error-msg\">{billingErr[billingForm.city.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info mb-20\">\r\n                                    <label>{strings[\"Postcode\"]}</label>\r\n                                    <input type=\"text\" name={billingForm.postalCode.name} ref={billingRef(billingForm.postalCode.validate)} />\r\n                                    {billingErr[billingForm.postalCode.name] && <p className=\"error-msg\">{billingErr[billingForm.postalCode.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                {/* <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>Email Address</label>\r\n                                    <input type=\"email\" name={billingForm.email.name} ref={billingRef(billingForm.email.validate)} />\r\n                                    {billingErr[billingForm.email.name] && <p className=\"error-msg\">{billingErr[billingForm.email.name].message}</p>}\r\n                                  </div>\r\n                                </div> */}\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>{strings[\"Phone\"]}</label>\r\n                                    <input type=\"number\" name={billingForm.phone.name} ref={billingRef(billingForm.phone.validate)} />\r\n                                    {billingErr[billingForm.phone.name] && <p className=\"error-msg\">{billingErr[billingForm.phone.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                              <div className=\"billing-back-btn\">\r\n                                <div className=\"billing-btn\">\r\n                                  <button type=\"submit\">{strings[\"Continue\"]}</button>\r\n                                </div>\r\n                              </div>\r\n                            </form>\r\n                          </div>\r\n                        </Card.Body>\r\n                      </Accordion.Collapse>\r\n                    </Card>\r\n                    <Card className=\"single-my-account mb-20\">\r\n                      <Card.Header className=\"panel-heading\">\r\n                        <Accordion.Toggle variant=\"link\" eventKey=\"1\">\r\n                          <h3 className=\"panel-title\">\r\n                            <span>3 .</span> {strings[\"Delivery Address\"]}{\" \"}\r\n                          </h3>\r\n                        </Accordion.Toggle>\r\n                      </Card.Header>\r\n                      <Accordion.Collapse eventKey=\"1\">\r\n                        <Card.Body>\r\n                          <div className=\"myaccount-info-wrapper\">\r\n                            <div className=\"account-info-wrapper\">\r\n                              <h4>{strings[\"Delivery Information\"]}</h4>\r\n                              {/* <h5>Your Personal Details</h5> */}\r\n                            </div>\r\n                            <form onSubmit={deliverySubmit(onUpdateDelivery)}>\r\n                              <div className=\"row\">\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>{strings[\"First Name\"]}</label>\r\n                                    <input type=\"text\" name={billingForm.shipFirstName.name} ref={deliveryRef(billingForm.shipFirstName.validate)} />\r\n                                    {deliveryErr[billingForm.shipFirstName.name] && <p className=\"error-msg\">{deliveryErr[billingForm.shipFirstName.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>{strings[\"Last Name\"]}</label>\r\n                                    <input type=\"text\" name={billingForm.shipLastName.name} ref={deliveryRef(billingForm.shipLastName.validate)} />\r\n                                    {deliveryErr[billingForm.shipLastName.name] && <p className=\"error-msg\">{deliveryErr[billingForm.shipLastName.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-12\">\r\n                                  <div className=\"billing-info mb-20\">\r\n                                    <label>{strings[\"Company Name\"]}</label>\r\n                                    <input type=\"text\" name={billingForm.shipCompany.name} ref={deliveryRef(billingForm.shipCompany.validate)} />\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-12\">\r\n                                  <div className=\"billing-info mb-20\">\r\n                                    <Script\r\n                                      url={\"https://maps.googleapis.com/maps/api/js?key=\" + window._env_.APP_MAP_API_KEY + \"&libraries=places\"}\r\n                                      onLoad={handleDeliveryScriptLoad}\r\n                                    />\r\n                                    <label>{strings[\"Street Address\"]}</label>\r\n                                    <input\r\n                                      className=\"billing-info\"\r\n                                      placeholder=\"House number and street name\"\r\n                                      type=\"text\"\r\n                                      id=\"autocomplete1\"\r\n                                      name={billingForm.shipAddress.name}\r\n                                      ref={deliveryRef(billingForm.shipAddress.validate)}\r\n                                    />\r\n                                    {deliveryErr[billingForm.shipAddress.name] && <p className=\"error-msg\">{deliveryErr[billingForm.shipAddress.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info mb-20\">\r\n                                    <label>{strings[\"Country\"]}</label>\r\n                                    <Controller\r\n                                      name={billingForm.shipCountry.name}\r\n                                      control={deliveryControl}\r\n                                      rules={billingForm.shipCountry.validate}\r\n                                      render={props => {\r\n                                        return (\r\n                                          <select onChange={(e) => { props.onChange(e.target.value); getShippingState(e.target.value); }} value={props.value}>\r\n                                            <option>{strings[\"Select a country\"]}</option>\r\n                                            {\r\n\r\n                                              countryData.map((data, i) => {\r\n                                                return <option key={i} value={data.code}>{data.name}</option>\r\n                                              })\r\n                                            }\r\n                                          </select>\r\n                                        )\r\n                                      }}\r\n                                    />\r\n                                    {deliveryErr[billingForm.shipCountry.name] && <p className=\"error-msg\">{deliveryErr[billingForm.shipCountry.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info mb-20\">\r\n                                    <label>{strings[\"State\"]}</label>\r\n                                    {\r\n                                      shipStateData && shipStateData.length > 0 ?\r\n                                        <Controller\r\n                                          name={billingForm.shipStateProvince.name}\r\n                                          control={deliveryControl}\r\n                                          rules={billingForm.shipStateProvince.validate}\r\n                                          render={props => {\r\n                                            return (\r\n                                              <select onChange={(e) => props.onChange(e.target.value)} value={props.value}>\r\n                                                <option>{strings[\"Select a state\"]}</option>\r\n                                                {\r\n                                                  shipStateData.map((data, i) => {\r\n                                                    return <option key={i} value={data.code}>{data.name}</option>\r\n                                                  })\r\n                                                }\r\n                                              </select>)\r\n                                          }}\r\n                                        />\r\n                                        :\r\n                                        <input type=\"text\" name={billingForm.shipStateProvince.name} ref={deliveryRef(billingForm.shipStateProvince.validate)} />\r\n                                    }\r\n                                    {deliveryErr[billingForm.shipStateProvince.name] && <p className=\"error-msg\">{deliveryErr[billingForm.shipStateProvince.name].message}</p>}\r\n\r\n                                    {/* <input type=\"text\" /> */}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info mb-20\">\r\n                                    <label>{strings[\"Town/City\"]}</label>\r\n                                    <input type=\"text\" name={billingForm.shipCity.name} ref={deliveryRef(billingForm.shipCity.validate)} />\r\n                                    {deliveryErr[billingForm.shipCity.name] && <p className=\"error-msg\">{deliveryErr[billingForm.shipCity.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info mb-20\">\r\n                                    <label>{strings[\"Postcode\"]}</label>\r\n                                    <input type=\"text\" name={billingForm.shipPostalCode.name} ref={deliveryRef(billingForm.shipPostalCode.validate)} />\r\n                                    {deliveryErr[billingForm.shipPostalCode.name] && <p className=\"error-msg\">{deliveryErr[billingForm.shipPostalCode.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                {/* <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>Email Address</label>\r\n                                    <input type=\"email\" name={billingForm.shipEmail.name} ref={billingRef(billingForm.shipEmail.validate)} />\r\n                                    {billingErr[billingForm.shipEmail.name] && <p className=\"error-msg\">{billingErr[billingForm.shipEmail.name].message}</p>}\r\n                                  </div>\r\n                                </div> */}\r\n                                <div className=\"col-lg-6 col-md-6\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>{strings[\"Phone\"]}</label>\r\n                                    <input type=\"number\" name={billingForm.shipPhone.name} ref={deliveryRef(billingForm.shipPhone.validate)} />\r\n                                    {deliveryErr[billingForm.shipPhone.name] && <p className=\"error-msg\">{deliveryErr[billingForm.shipPhone.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                              <div className=\"billing-back-btn\">\r\n                                <div className=\"billing-btn\">\r\n                                  <button type=\"submit\">{strings[\"Continue\"]}</button>\r\n                                </div>\r\n                              </div>\r\n                            </form>\r\n                          </div>\r\n                        </Card.Body>\r\n                      </Accordion.Collapse>\r\n                    </Card>\r\n                    <Card className=\"single-my-account mb-20\">\r\n                      <Card.Header className=\"panel-heading\">\r\n                        <Accordion.Toggle variant=\"link\" eventKey=\"2\">\r\n                          <h3 className=\"panel-title\">\r\n                            <span>4 .</span> {strings[\"Change your password\"]}\r\n                          </h3>\r\n                        </Accordion.Toggle>\r\n                      </Card.Header>\r\n                      <Accordion.Collapse eventKey=\"2\">\r\n                        <Card.Body>\r\n                          <div className=\"myaccount-info-wrapper\">\r\n                            <div className=\"account-info-wrapper\">\r\n                              <h4>{strings[\"Change Password\"]}</h4>\r\n                            </div>\r\n                            <form onSubmit={handleSubmit(onChangePassword)}>\r\n                              <div className=\"row\">\r\n                                <div className=\"col-lg-12 col-md-12\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>{strings[\"User Name\"]}</label>\r\n                                    <input type=\"text\" name={changePasswordForm.userName.name} ref={register(changePasswordForm.userName.validate)} />\r\n                                    {errors[changePasswordForm.userName.name] && <p className=\"error-msg\">{errors[changePasswordForm.userName.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-12 col-md-12\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>{strings[\"Current Password\"]}</label>\r\n                                    <input type=\"password\" name={changePasswordForm.currentPassword.name} ref={register(changePasswordForm.currentPassword.validate)} />\r\n                                    {errors[changePasswordForm.currentPassword.name] && <p className=\"error-msg\">{errors[changePasswordForm.currentPassword.name].message}</p>}\r\n\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-12 col-md-12\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>{strings[\"Password\"]}</label>\r\n                                    <input type=\"password\" onChange={(e) => onPasswordChange(e)} name={changePasswordForm.password.name} ref={register(changePasswordForm.password.validate)} />\r\n                                    {errors[changePasswordForm.password.name] && <p className=\"error-msg\">{errors[changePasswordForm.password.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"col-lg-12 col-md-12\">\r\n                                  <div className=\"billing-info\">\r\n                                    <label>{strings[\"Repeat Password\"]}Repeat Password</label>\r\n                                    <input type=\"password\" onChange={(e) => onConfirmPassword(e)} name={changePasswordForm.repeatPassword.name} ref={register(changePasswordForm.repeatPassword.validate)} />\r\n                                    {errors[changePasswordForm.repeatPassword.name] && <p className=\"error-msg\">{errors[changePasswordForm.repeatPassword.name].message}</p>}\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n\r\n                              <div className=\"billing-back-btn\">\r\n                                <div className=\"billing-btn\">\r\n                                  <button type=\"submit\">{strings[\"Continue\"]}</button>\r\n                                </div>\r\n                              </div>\r\n                            </form>\r\n                          </div>\r\n                        </Card.Body>\r\n                      </Accordion.Collapse>\r\n                    </Card>\r\n                    <Card className=\"single-my-account mb-20\">\r\n                      <Card.Header className=\"panel-heading\">\r\n                        {/* */}\r\n                        <Accordion.Toggle variant=\"link\" eventKey=\"4\">\r\n                          <h3 className=\"panel-title\">\r\n                            <span>5 .</span> {strings[\"Account Management\"]}\r\n                          </h3>\r\n                        </Accordion.Toggle>\r\n                      </Card.Header>\r\n                      <Accordion.Collapse eventKey=\"4\">\r\n                        <Card.Body>\r\n                          <div className=\"myaccount-info-wrapper\">\r\n                            {/* <div className=\"account-info-wrapper\">\r\n                              <h4>{strings[\"Your account\"]}</h4>\r\n                            </div> */}\r\n                            <form>\r\n                              {/* <div className=\"row\">\r\n                                <div className=\"col-lg-12 col-md-12\">\r\n                                  <button type=\"button\" onClick={onDeleteConfirm} className=\"delete_account\">\r\n                                    <span className=\"label\">{strings[\"Delete your account\"]}</span>\r\n                                  </button>\r\n                                </div>\r\n\r\n                              </div> */}\r\n                              <div className=\"account-management\">\r\n                                <div className=\"delete-btn\">\r\n                                  <button type=\"button\" onClick={onDeleteConfirm} >{strings[\"Delete your account\"]}</button>\r\n                                </div>\r\n                              </div>\r\n                            </form>\r\n                          </div>\r\n                        </Card.Body>\r\n                      </Accordion.Collapse>\r\n                    </Card>\r\n                  </Accordion>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n        {\r\n          isDeleted &&\r\n          <SweetAlert\r\n            showCancel\r\n            cancelBtnBsStyle=\"light\"\r\n            confirmBtnText=\"Yes, delete it!\"\r\n            confirmBtnBsStyle=\"danger\"\r\n            onConfirm={onDelete}\r\n            onCancel={onDeleteConfirm}\r\n            title=\"Are you sure?\"\r\n          >\r\n            Are you sure that you want to permanently delete this account\r\n        </SweetAlert>\r\n        }\r\n      </Layout>\r\n    </Fragment >\r\n  );\r\n};\r\n\r\nMyAccount.propTypes = {\r\n  location: PropTypes.object\r\n};\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    countryData: state.userData.country,\r\n    userData: state.userData.userData,\r\n    // cartItems: state.cartData.cartItems,\r\n    // currentLocation: state.userData.currentAddress,\r\n    stateData: state.userData.state,\r\n    shipStateData: state.userData.shipState,\r\n    merchant: state.merchantData.merchant\r\n    // defaultStore: state.merchantData.defaultStore,\r\n  };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setLoader: (value) => {\r\n      dispatch(setLoader(value));\r\n    },\r\n    setUser: (data) => {\r\n      dispatch(setUser(data));\r\n    },\r\n    deleteAllFromCart: () => {\r\n      dispatch(deleteAllFromCart())\r\n    },\r\n    getState: (code) => {\r\n      dispatch(getState(code));\r\n    },\r\n    getShippingState: (code) => {\r\n      dispatch(getShippingState(code));\r\n    },\r\n  };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(multilanguage(MyAccount));\r\n\r\n  // export default MyAccount;\r\n"],"sourceRoot":""}